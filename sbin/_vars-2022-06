# Variable definitions for Lane applications

# Debug Mode
# Leave near the top so it can be toggled on and off easily.
        # Default=false
                DEBUG_MODE=false
        # Alert levels: 0=none 1=light 2=normal 3=heavy 5=everything
                #CONFIG_system_log_level
                LOG_LEVEL=2
                TEXT_LEVEL=2

# Set a flag to confirm that the variables are not yet defined
        VARIABLES_ARE_DEFINED=false

# Built-in (at command line, use env to show more)
        # HOME (Home directory)
        # HOSTNAME (this host, not FQDN)
        # SHELL
        # USER (Current user)
                RUN_AS=$USER

# Global
        HOME_ROOT="/home"
        SBIN_DIR="/usr/local/sbin"
        SBIN_PARENT="$(dirname $SBIN_DIR)"
        DOMAIN_NAME="lanehensley.org"
        COLOPHON="by Lane Hensley, lane@lanehensley.org, https://lanehensley.org"
        TIMEZONE="America/Chicago"

# /etc/os-release defines a lot of environment variables
# Sample:
#    NAME="Ubuntu"
#    VERSION="18.04.4 LTS \(Bionic Beaver\)"
#    ID=ubuntu
#    ID_LIKE=debian
#    PRETTY_NAME="Ubuntu 18.04.4 LTS"
#    VERSION_ID="18.04"
#    HOME_URL="https://www.ubuntu.com/"
#    SUPPORT_URL="https://help.ubuntu.com/"
#    BUG_REPORT_URL="https://bugs.launchpad.net/ubuntu/"
#    PRIVACY_POLICY_URL="https://www.ubuntu.com/legal/terms-and-policies/privacy-policy"
#    VERSION_CODENAME=bionic
#    UBUNTU_CODENAME=bionic
source /etc/os-release

# Start timestamps
# Ref https://www.cyberciti.biz/faq/linux-unix-formatting-dates-for-display/ for date format %codes
        START_DATEANDTIMESTAMP=$(/bin/date '+%Y-%m-%d-%H-%M-%S-%Z')     # Like 2020-09-07-16-05-23-CDT. Used in naming SSH keys and backing up installed files like fstab
        START_DATESTAMP=$(/bin/date '+%Y-%m-%d   ')                     # Like 2020-09-07. Used in backup variables below
        START_DAYSTAMP=$(/bin/date '+%d')                               # Like 07
        START_MONTHSTAMP=$(/bin/date '+%Y-%m')                          # Like 2020-09
        START_TIMESTAMP=$(/bin/date)                                    # Like Mon 07 Sep 2020 04:01:23 PM CDT
        START_WEEKDAYSTAMP=$(/bin/date '+%a')                           # Like Mon. Used in backup variables below
        START_WEEKDAYSTAMP2=$(/bin/date '+%Y-%m-%d-%H-%M-%S-%Z-%a')     # Like 2020-09-07-16-05-23-CDT-Mon. Used in backup variables below
        START_WEEKDAYSTAMP3=$(/bin/date '+%w-%a')                       # Like 0-Sun, 1-Mon, 2-Tue, etc. Used in backup variables below

# About This Script (or at least the one sourcing it)
        PROGRAM_DIRECTORY=$(dirname $0)
        UUID=$(uuidgen)

# Current user info
        CURRENT_USER=$USER
        CURRENT_HOME_DIR=$HOME

# Admin user info
# Dependent on section Global
        ADMIN_USER="lhensley"
        ADMIN_HOME_DIR="$HOME_ROOT/$ADMIN_USER"
        ADMIN_CELL_EMAIL="7608514641@vtext.com"
        ADMIN_EMAIL="lane@lanehensley.org"
        ADMIN_NAME="Lane Hensley"

# Root user info
        ROOT_USER="root"
        ROOT_HOME_DIR="/root"
        ROOT_EMAIL="root@$HOSTNAME@$DOMAIN_NAME"
        ROOT_NAME="Root at $HOSTNAME@$DOMAIN_NAME"

# Temp file definitions
# DEPENDENT ON ABOUT THIS SCRIPT ABOVE
        TEMP_CRON="/tmp/cron-$UUID.tmp"
        TEMP_SOCKETS_BACKUP="/tmp/sockets-$UUID.tmp"         # Formerly $SOCKETS_TEMP_FILE
        TEMP_DATABASES="/tmp/databases-$UUID.tmp"
        TEMP_PASSWORD_INCLUDE="/tmp/passwords"
        TEMP_INCLUDES="/tmp/includes-$UUID.tmp"
        TEMP_LOG="/tmp/log-$UUID.tmp"

# Logging:  system.log-level: 0=none 1=light 2=normal 3=heavy 5=everything
        #CONFIG_system_log_level
        LOG_LEVEL=2
        TEXT_LEVEL=2
        # Set to false 11/25/2020. Do it manually if you want it.
        LOG_START=false
        # Set to false 11/25/2020. Do it manually if you want it.
        LOG_END=false

# Exit codes
        EXIT_CODE_SUCCESS=0
        EXIT_CODE_INTERNAL_ERROR=61
        EXIT_CODE_INVALID_OPTIONS=62
        EXIT_CODE_ROOT_REQUIRED=63
        EXIT_CODE_UBUNTU_REQUIRED=64
        EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED=65
        EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED=66
        EXIT_CODE_SPECIFIC_SERVER_REQUIRED=67
        EXIT_CODE_USER_ABORT=68
        EXIT_CODE_FILE_NOT_FOUND=69
        EXIT_CODE_DIRECTORY_NOT_FOUND=70
        EXIT_CODE_FILE_IN_USE=71
        EXIT_CODE_WRONG_HOST=72
        EXIT_CODE_SEGMENTATION_ERROR=139 # Returned by HandBrakeCLI

# Text Alerts
# DEPENDENT on user definitions above
# Set as many as desired. Must be email addresses that forward to SMS
# Example: TEXT_ALERT[becky]=7608515830@vtext.com
        declare -A TEXT_ALERT
        TEXT_ALERT[admin]=$ADMIN_CELL_EMAIL
        TEXT_ALERTS=""
        for KEY in "${!TEXT_ALERT[@]}"; do TEXT_ALERTS+="${TEXT_ALERT[$KEY]} "; done

# Text Markup Codes
#       BOLD=$(tput bold)
#       NORMAL=$(tput sgr0)
#       UNDERLINE=$(tput smul)
#       DIM=$(tput dim)
#       REVERSE=$(tput rev)
#       STANDOUT=$(tput smso)
#       BLACK=$(tput setf 0)
#       BLUE=$(tput setf 1)
#       GREEN=$(tput setf 2)
#       CYAN=$(tput setf 3)
#       RED=$(tput setf 4)
#       MAGENTA=$(tput setf 5)
#       YELLOW=$(tput setf 6)
#       WHITE=$(tput setf 7)

# Email Alerts
# DEPENDENT on user definitions above
# Set as many as desired.
# Example: EMAIL_ALERT[becky]=rkh@georgetown.edu
        declare -A EMAIL_ALERT
        EMAIL_ALERT[admin]=$ADMIN_EMAIL
        EMAIL_ALERTS=""
        for KEY in "${!EMAIL_ALERT[@]}"; do EMAIL_ALERTS+="${EMAIL_ALERT[$KEY]} "; done

# Apache2
        WEB_ROOTS="/var/www"
        THIS_WEB_ROOT="$WEB_ROOTS/html"

# Archive Directories, Files, and Paths
# DEPENDENT on definition of $HOSTNAME, but that's built-in
        declare -A ARCHIVE_FILE_SYSTEM
                ARCHIVE_FILE_SYSTEM[default]="/"
                ARCHIVE_FILE_SYSTEM[nuc01]="/mnt/5TBE"
                ARCHIVE_FILE_SYSTEM[adam]="/mnt/5TBD"
                ARCHIVE_FILE_SYSTEM[oz]="/mnt/5TBC"
        declare -A ARCHIVE_DIRECTORY
                ARCHIVE_DIRECTORY[default]="/var/lib/archives/$HOSTNAME"
                ARCHIVE_DIRECTORY[nuc01]=${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}/archives/$HOSTNAME
                ARCHIVE_DIRECTORY[adam]=${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}/archives/$HOSTNAME
                ARCHIVE_DIRECTORY[oz]=${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}/archives/$HOSTNAME
        THIS_ARCHIVE_FILE_SYSTEM="${ARCHIVE_FILE_SYSTEM[default]}"
                if [ $HOSTNAME == "nuc01" ]; then THIS_ARCHIVE_FILE_SYSTEM="${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}"; fi
                if [ $HOSTNAME == "adam" ]; then THIS_ARCHIVE_FILE_SYSTEM="${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}"; fi
                if [ $HOSTNAME == "oz" ]; then THIS_ARCHIVE_FILE_SYSTEM="${ARCHIVE_FILE_SYSTEM[$HOSTNAME]}"; fi
        THIS_ARCHIVE_DIRECTORY="${ARCHIVE_DIRECTORY[default]}"
                if [ $HOSTNAME == "nuc01" ]; then THIS_ARCHIVE_DIRECTORY="${ARCHIVE_DIRECTORY[$HOSTNAME]}"; fi
                if [ $HOSTNAME == "adam" ]; then THIS_ARCHIVE_DIRECTORY="${ARCHIVE_DIRECTORY[$HOSTNAME]}"; fi
                if [ $HOSTNAME == "oz" ]; then THIS_ARCHIVE_DIRECTORY="${ARCHIVE_DIRECTORY[$HOSTNAME]}"; fi
        ARCHIVE_TAR_FILE="$HOSTNAME-$START_DATESTAMP.gz"
                ARCHIVE_TAR_FULL="$THIS_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_FILE"
        ARCHIVE_TAR_WEEKDAY_FILE="$HOSTNAME-weekday-$START_WEEKDAYSTAMP3.gz"
                ARCHIVE_TAR_FULL_WEEKDAY="$THIS_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_WEEKDAY_FILE"
        ARCHIVE_TAR_DAY_FILE="$HOSTNAME-day-$START_DAYSTAMP.gz"
                ARCHIVE_TAR_FULL_DAY="$THIS_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_DAY_FILE"
        ARCHIVE_TAR_MONTH_FILE="$HOSTNAME-month-$START_MONTHSTAMP.gz"
                ARCHIVE_TAR_FULL_MONTH="$THIS_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_MONTH_FILE"

# Backup COLD # cold backup
# DEPENDENT on definition of $HOSTNAME, but that's built-in
        # Adjusted 12/30/2020 because none of these services were coming back.
        # COLD_PROTECTED_SERVICES="apache2 cron ddclient fail2ban lsyncd mysql plexmediaserver postfix proftpd tautulli webmin"
        COLD_PROTECTED_SERVICES="mysql postfix"
                # Previously incuded gdm3, but that turns off the console.
        COLD_BACKUP_FILE_SYSTEM="/"                                # Default
        COLD_BACKUP_FS_READ_ONLY=false                             # Default
        COLD_BACKUP_PARENT_DIRECTORY="/var/local"                  # Default
        COLD_BACKUP_SUBDIRECTORY="cold-backup"                     # Default
        TEMP_COLD_BACKUP_DIRECTORY="/var/tmp/cold-backup"                  # Default
        TEMP_COLD_BACKUP_PARENT_DIRECTORY="/var/tmp"                       # Default
        TEMP_COLD_BACKUP_SUBDIRECTORY="cold-backup"                # Default
        TEMP_ARCHIVE_DIRECTORY="/var/tmp/archives"                         # Default
        TEMP_ARCHIVE_PARENT_DIRECTORY="/var/tmp"                               # Default
        TEMP_ARCHIVE_SUBDIRECTORY="archives"                                       # Default
        # Default COLD_RESTORE_POINT = "/", but "/var/restore-points/$START_DATEANDTIMESTAMP" recommended for trouble-shooting
                COLD_RESTORE_POINT="/"
                # COLD_RESTORE_POINT="/var/restore-points/$START_DATEANDTIMESTAMP"
        COLD_BACKUP_LOG="$ADMIN_HOME_DIR/.coldstorage.log"
        if [ $HOSTNAME == "nuc01" ]; then
                COLD_BACKUP_FILE_SYSTEM="/mnt/5TBE"
                COLD_BACKUP_FS_READ_ONLY=false
                COLD_BACKUP_PARENT_DIRECTORY=$COLD_BACKUP_FILE_SYSTEM
                TEMP_COLD_BACKUP_DIRECTORY="/mnt/bob/cold-backup"
                TEMP_COLD_BACKUP_PARENT_DIRECTORY="/mnt/bob"
                TEMP_COLD_BACKUP_SUBDIRECTORY="cold-backup"
                TEMP_ARCHIVE_DIRECTORY="/mnt/bob/archives"
                TEMP_ARCHIVE_PARENT_DIRECTORY="/mnt/bob"
                TEMP_ARCHIVE_SUBDIRECTORY="archives"
                fi
        if [ $HOSTNAME == "adam" ]; then
                COLD_BACKUP_FILE_SYSTEM="/mnt/5TBD"
                COLD_BACKUP_FS_READ_ONLY=false
                COLD_BACKUP_PARENT_DIRECTORY=$COLD_BACKUP_FILE_SYSTEM
                # Commenting out all below to keep defaults because only the root file system is an SSD.
                # TEMP_COLD_BACKUP_DIRECTORY="$COLD_BACKUP_FILE_SYSTEM/cold-backup"
                # TEMP_COLD_BACKUP_PARENT_DIRECTORY="$COLD_BACKUP_FILE_SYSTEM"
                # TEMP_COLD_BACKUP_SUBDIRECTORY="cold-backup"
                # TEMP_ARCHIVE_DIRECTORY="$COLD_BACKUP_FILE_SYSTEM/archives"
                # TEMP_ARCHIVE_PARENT_DIRECTORY="$COLD_BACKUP_FILE_SYSTEM"
                # TEMP_ARCHIVE_SUBDIRECTORY="archives"
                fi
        if [ $HOSTNAME == "oz" ]; then
                COLD_BACKUP_FILE_SYSTEM="/mnt/5TBC"
                COLD_BACKUP_FS_READ_ONLY=false
                COLD_BACKUP_PARENT_DIRECTORY=$COLD_BACKUP_FILE_SYSTEM
                TEMP_COLD_BACKUP_DIRECTORY="/mnt/ssd1tb/cold-backup"
                TEMP_COLD_BACKUP_PARENT_DIRECTORY="/mnt/ssd1tb"
                TEMP_COLD_BACKUP_SUBDIRECTORY="cold-backup"
                TEMP_ARCHIVE_DIRECTORY="/mnt/ssd1tb/archives"
                TEMP_ARCHIVE_PARENT_DIRECTORY="/mnt/ssd1tb"
                TEMP_ARCHIVE_SUBDIRECTORY="archives"
                fi
        COLD_BACKUP_DIRECTORY="$COLD_BACKUP_PARENT_DIRECTORY/$COLD_BACKUP_SUBDIRECTORY"
        COLD_BACKUP_EXCLUDES="--exclude='/var/snap/plexmediaserver/common/Library/Application Support/Plex Media Server/Cache'"
        COLD_BACKUP_EXCLUDES+=" --exclude=/var/snap/plexmediaserver/common/Library/store/*"
        COLD_BACKUP_EXCLUDES+=" --exclude=/var/snap/plexmediaserver/common/Library/work/*"
        COLD_BACKUP_EXCLUDES+=" --exclude=.cache"
        COLD_BACKUP_EXCLUDES+=" --exclude=Cache"
        COLD_BACKUP_SOURCES="$COLD_BACKUP_EXCLUDES etc home opt root"
        COLD_BACKUP_SOURCES+=" var/www"
        COLD_BACKUP_SOURCES+=" var/snap/plexmediaserver/common/Library"
        COLD_RESTORE_EXCLUDES="--exclude=.config/os-install-info.txt"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/fstab*"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/systemd/system"
#       COLD_RESTORE_EXCLUDES+=" --exclude=.cache"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/mtab"
#       COLD_RESTORE_EXCLUDES+=" --exclude='/var/snap/plexmediaserver/common/Library/Application Support/Plex Media Server/Cache'"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/os-release"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/rc*"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/udisks2"
        COLD_RESTORE_EXCLUDES+=" --exclude=etc/whoopsie"

# crontab backups & restores
        CRONTAB_BACKUP_USERS="$ROOT_USER $ADMIN_USER"

# ddclient
        DDCLIENT_INTERVAL=7200

# File System Backups
# DEPENDENT on Archive Directories AND Start Timestamps above
        BACKUP_ROOT="/"                                                                          # Formerly "DIRECTORY_FROM"
        declare -A BACKUP_OPTION
        BACKUP_OPTION[--create]=true
        BACKUP_OPTION[--gzip]=true 
        BACKUP_OPTION[--auto-compress]=true
        BACKUP_OPTION[--preserve-permissions]=true
        BACKUP_OPTION[--file=$TEMP_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_WEEKDAY_FILE]=true
        BACKUP_OPTION[--exclude-vcs]=true
        BACKUP_OPTION[--exclude-caches]=true
        BACKUP_OPTION[--totals]=true
        BACKUP_OPTION[--verbose]=true
        # BACKUP_OPTION[--exclude-from=$TEMP_SOCKETS_BACKUP]=true
        # Ref: https://bytefreaks.net/gnulinux/bash/bash-how-to-iterate-over-associative-array-and-print-all-keyvalue-pairs
        BACKUP_OPTIONS=""; 
        for KEY in "${!BACKUP_OPTION[@]}"; do BACKUP_OPTIONS+=$KEY" "; done
        declare -A BACKUP_SOURCE
        BACKUP_SOURCE[/etc]=true
        BACKUP_SOURCE[/home]=true
        BACKUP_SOURCE[/root]=true
        BACKUP_SOURCE[/usr/local/sbin]=true
        BACKUP_SOURCE[/var/www]=true
        # BACKUP_SOURCE[/var/local/archives/*.sql]=true
        # Ref: https://bytefreaks.net/gnulinux/bash/bash-how-to-iterate-over-associative-array-and-print-all-keyvalue-pairs
        BACKUP_SOURCES=""; for KEY in "${!BACKUP_SOURCE[@]}"; do BACKUP_SOURCES+=$KEY" "; done

##################################################################################
##### IMPORTANT: Update this to draw data from git. This is WAY out of date. #####
##################################################################################
# Peripheral File System Mount Points
# This info is appended to /etc/fstab, and the mount points (key values) are created, at system installation
# Example: MOUNT_POINT_DESCRIPTION[/mnt/Black4T01]="Black4T01 (4TB) UUID=48B4AD5BB4AD4BEE"
# Example: MOUNT_POINT_DEFINITION[/mnt/Black4T01]="UUID=48B4AD5BB4AD4BEE /mnt/Black4T01 ntfs defaults 0 0"
        declare -A MOUNT_POINT_DESCRIPTION
        declare -A MOUNT_POINT_DEFINITION
        if [ $HOSTNAME == "nuc01" ]; then
                MOUNT_POINT_DESCRIPTION[/mnt/Black4T01]="Black4T01 (4TB) UUID=48B4AD5BB4AD4BEE"
                        MOUNT_POINT_DEFINITION[/mnt/Black4T01]="UUID=48B4AD5BB4AD4BEE /mnt/Black4T01 ntfs noauto 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/bertha]="bertha (3TB) UUID=d28256f9-c258-451e-b299-d4849cf19e0b"
                        MOUNT_POINT_DEFINITION[/mnt/bertha]="UUID=d28256f9-c258-451e-b299-d4849cf19e0b /mnt/bertha ext4 defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/cloteal]="cloteal (10TB) UUID=4e356144-2e69-4812-8958-d035a9ebc28e"
                        MOUNT_POINT_DEFINITION[/mnt/cloteal]="UUID=4e356144-2e69-4812-8958-d035a9ebc28e /mnt/cloteal ext4 defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/MyBook3T01]="MyBook3T01 (3TB) UUID=C6B89CABB89C9B8D"
                        MOUNT_POINT_DEFINITION[/mnt/MyBook3T01]="UUID=C6B89CABB89C9B8D /mnt/MyBook3T01 ntfs defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/Silver5TB-A]="Silver5TB-A (5TB) UUID=0A538B3244DE3676"
                        MOUNT_POINT_DEFINITION[/mnt/Silver5TB-A]="UUID=0A538B3244DE3676 /mnt/Silver5TB-A ntfs defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/Silver5TB-B]="Silver5TB-B (5TB) UUID 634B5E207BE18E54"
                        MOUNT_POINT_DEFINITION[/mnt/Silver5TB-B]="UUID=D2929F3D929F254F /mnt/Silver5TB-B ntfs defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/5TBE]="# Black 5TB External Seagate"
                        MOUNT_POINT_DEFINITION[/mnt/5TBE]="UUID=f8aad385-2d47-42aa-b62e-9a4afd024beb /mnt/5TBE ext4 defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/home/plex-swap/uploads]="Bind mount"
                        MOUNT_POINT_DEFINITION[/home/plex-swap/uploads]="#/mnt/cloteal/PlexUploads /home/plex-swap/uploads none bind 0 0"
                MOUNT_POINT_DESCRIPTION[/home/plex-swap/downloads]="Bind mount"
                        MOUNT_POINT_DEFINITION[/home/plex-swap/downloads]="#/mnt/cloteal/Plex /home/plex-swap/downloads none bind 0 0"
        fi
        if [ $HOSTNAME == "oz" ]; then
                MOUNT_POINT_DESCRIPTION[/mnt/ssd1tb]="Internal SSD drive, 1T"
                        MOUNT_POINT_DEFINITION[/mnt/ssd1tb]="UUID=be4a7edd-1cde-4dfe-ab3c-f5b64a59a9ce /mnt/ssd1tb ext4 defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/ext10tb01]="External Hard Drive for Plex, 10TB (rerun)"
                        MOUNT_POINT_DEFINITION[/mnt/ext10tb01]="UUID=08853dd9-14a7-4707-b6d6-9f49150a7f32 /mnt/ext10tb01 ext4 rw,defaults 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/Black1TB]="# Black 1TB"
                        MOUNT_POINT_DEFINITION[/mnt/Black1TB]="# UUID=c359e0c7-c6a1-4a49-b7eb-82fe3e5f0f25 /mnt/Black1TB ext4 noauto 0 0"
                MOUNT_POINT_DESCRIPTION[/mnt/5TBC]="# Black 5TB (C) External Seagate"
                        MOUNT_POINT_DEFINITION[/mnt/5TBC]="UUID=fa9f5c57-94fd-4706-979e-4c30189592a5 /mnt/5TBC ext4 default 0 0"
        fi

# Git
        GIT_BRANCH="master"
        # GIT_BRANCH="dev"
        GIT_ROOT="/var/local/git"                            # Formerly system.git
        GIT_GO="$GIT_ROOT/go"                                # Formerly system.git.go
        GIT_GO_CONFIGS="$GIT_GO/configs"                       # Formerly system.git.go.configs
        GIT_GO_SBIN="$GIT_GO/sbin"                             # Formerly #system.git.go.sbin
        GIT_GO_SERVICES="$GIT_GO/services"
        GIT_GO_SETUP="$GIT_GO/setup"                           # Formerly system.git.go.setup
        GIT_TOKEN=4b662b7d4431ec1956127aa9d4fdbd8d75ec821a   # Formerly system.git.token
        SERVICES_DIR="/lib/systemd/system"

# HandBrake
# DEPENDENT ON $ADMIN_HOME_DIR DEFINITION ABOVE
        HANDBRAKE_CLI="/usr/bin/HandBrakeCLI"
        HANDBRAKE_PRESETS="$ADMIN_HOME_DIR/.HandBrake/Lane 1080p (BluRay, All Languages).json"

# Incoming Scans
        INCOMING_SCANS="$ADMIN_HOME_DIR/Scans"

# Installation
        OS_INSTALL_INFO_FILE=.config/os-install-info.txt
        OS_INSTALL_INFO_PATH=$ROOT_HOME_DIR/$OS_INSTALL_INFO_FILE

# MakeMKV
        MAKEMKV_OUTPUT_DIRECTORY="$ADMIN_HOME_DIR/Videos/MakeMKV-Completed"
        MAKEMKV_TRANSCODED_FILES_DIRECTORY="$ADMIN_HOME_DIR/Videos/HandBrake-Completed"
        MAKEMKV_FILE_NAME_PATTERN="*.mkv"

# MySQL
        MYSQL_ADMIN_NAME="admin"
        MYSQL_CLIENT_CERTS_DIR="$ADMIN_HOME_DIR/certs"
        MYSQL_CONFIGS="/etc/mysql/conf.d"
        MYSQL_DUMP_DIR=$ADMIN_HOME_DIR/mysql-dumps
        MYSQL_SERVER_BIN_DIR="/var/lib/mysql"

# MySQL Backups
# DEPENDENT on Archive Directories AND Start Timestamps above
        ARCHIVE_MYSQL_FILE="$HOSTNAME-$START_DATESTAMP.sql"
        ARCHIVE_MYSQL_FULL="$THIS_ARCHIVE_DIRECTORY/$ARCHIVE_MYSQL_FILE"
        ARCHIVE_MYSQL_LITURGY="$THIS_ARCHIVE_DIRECTORY/$HOSTNAME-liturgy.sql"
        ARCHIVE_MYSQL_DB="$THIS_ARCHIVE_DIRECTORY/$HOSTNAME-$START_DATESTAMP-"

# Passwords
        LENGTH_OF_PASSWORDS=60
        MAX_MYSQL_PASSWORD_LENGTH=30
        EXCLUDED_PASSWORD_CHARACTERS=" \$\'\"\\\#\|\<\>\;\*\&\~\!\I\l\1\O\0\`\/\?"

# phpMyAdmin
        PHPMYADMIN_DIR="/usr/share/phpmyadmin"

#########################################################################
##### IMPORTANT: Update this to draw data. This is WAY out of date. #####
#########################################################################
# Media Server
# DEPENDENT on Archives Directories definitions above
# DEPENDENT on MKMKV above
        PLEX_USER="plex"
        PLEX_VIDEO_FILE_PERMISSIONS=664
        PLEX_VIDEO_LIBRARY_DIRECTORY_PERMISSIONS=775
        PLEX_FILE_NAME_PATTERN="*.ts"
        unset PLEX_ROOT
        d="/"
        VIDEO_WORK_FILE_SYSTEM="/mnt/bob"
        VIDEO_STORE_FILE_SYSTEM="/mnt/12TBB"
        VIDEO_WORK_DIRECTORY="$VIDEO_WORK_FILE_SYSTEM/plex/dvr/in"
        VIDEO_STORE_DIRECTORY="$VIDEO_STORE_FILE_SYSTEM/plex-dvr"
        PLEX_LIVE_APPLICATION_SUPPORT="/var/snap/plexmediaserver/common/Library"
        PLEX_BACKUP_FILE_SYSTEM="$THIS_ARCHIVE_FILE_SYSTEM"
        PLEX_BACKUP_APPLICATION_SUPPORT="$THIS_ARCHIVE_DIRECTORY/plex/Application Support"
        if [ $HOSTNAME == "nuc01" ]; then 
                # Define all Plex data root directories
                # Set them all as true
                # Example: PLEX_ROOT[/mnt/12TBB/plex]=true
                        declare -A PLEX_ROOT
                        PLEX_ROOT[/mnt/12TBB/plex]=true
                        PLEX_ROOT[/mnt/12TBB/plex-dvr]=true
                        PLEX_ROOT[/mnt/bertha/plex]=true
                        PLEX_ROOT[/mnt/bob/plex]=true
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/metadata]=true
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/store]=true
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/work]=true
                VIDEO_WORK_FILE_SYSTEM="/mnt/bob"
                VIDEO_STORE_FILE_SYSTEM="/mnt/12TBB"
                VIDEO_WORK_DIRECTORY="$VIDEO_WORK_FILE_SYSTEM/plex/dvr/in"
                VIDEO_STORE_DIRECTORY="$VIDEO_STORE_FILE_SYSTEM/plex-dvr"
                PLEX_BACKUP_APPLICATION_SUPPORT="$THIS_ARCHIVE_DIRECTORY/plex/Application Support"
                fi
        if [ $HOSTNAME == "oz" ]; then 
                # Define all Plex data root directories
                # Set them all as true
                # Example: PLEX_ROOT[/mnt/12TBB/plex]=true
                        declare -A PLEX_ROOT
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/metadata]=true
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/store]=true
                        PLEX_ROOT[/var/snap/plexmediaserver/common/Library/work]=true
                        PLEX_ROOT[/mnt/ssd1tb/plex]=true
                        PLEX_ROOT[/mnt/ext10tb01/plex]=true
                VIDEO_WORK_FILE_SYSTEM="/mnt/ext10tb01"
                VIDEO_WORK_DIRECTORY="$VIDEO_WORK_FILE_SYSTEM/plex/dvr-in"
                VIDEO_STORE_FILE_SYSTEM="/mnt/ext10tb01"
                VIDEO_STORE_DIRECTORY="$VIDEO_STORE_FILE_SYSTEM/plex/dvr-oz"
                PLEX_BACKUP_APPLICATION_SUPPORT="$THIS_ARCHIVE_DIRECTORY/plex/Application Support"
                fi
        if [ $HOSTNAME == "adam" ]; then 
                # Define all Plex data root directories
                # Set them all as true
                # Example: PLEX_ROOT[/mnt/12TBB/plex]=true
                        declare -A PLEX_ROOT
                        PLEX_ROOT[/mnt/12TBB/plex]=true
                        PLEX_ROOT[/mnt/12TBB/plex-dvr]=true
                        PLEX_ROOT[/mnt/bertha/plex]=true
                        PLEX_ROOT[/mnt/bob/plex]=true
                VIDEO_WORK_FILE_SYSTEM="/mnt/bob"
                VIDEO_STORE_FILE_SYSTEM="/mnt/12TBB"
                VIDEO_WORK_DIRECTORY="$VIDEO_WORK_FILE_SYSTEM/plex/dvr/in"
                VIDEO_STORE_DIRECTORY="$VIDEO_STORE_FILE_SYSTEM/plex-dvr"
                PLEX_BACKUP_APPLICATION_SUPPORT="$THIS_ARCHIVE_DIRECTORY/plex/Application Support"
                fi

# Postfix Setup
        MAILNAME=$HOSTNAME
        MAIN_MAILER_TYPE="'Internet with smarthost'"
        RELAYHOST="mail.twc.com"                                          # Spectrum Internet (DEFAULT for Austin)
        if [ $HOSTNAME == "nuc01" ]; then RELAYHOST="mail.mchsi.com"; fi  # Mediacom Cable Internet
        if [ $HOSTNAME == "red" ]; then RELAYHOST="mail.mchsi.com"; fi    # Mediacom Cable Internet

# reset-when-ready
        RESET_FLAG_FILE="/tmp/reset-when-ready"

# SBIN
        SBIN_PERMISSIONS=755

# SERVICES
        SERVICES_DIR="/lib/systemd/system"
        SERVICES_DIR_PERMISSIONS=755
        SERVICES_FILE_PERMISSIONS=644

# System Snapshot File
        SYSTEM_SNAPSHOT_FILE="$ADMIN_HOME_DIR/.system-snapshot-data.csv"
        SYSTEM_SNAPSHOT_JSON_FILE="$ADMIN_HOME_DIR/.system-snapshot-data.json"
        SYSTEM_SNAPSHOT_FILE_PERMISSIONS=640

# Video Processing Defaults
        DEFAULT_VIDEO_FILE_PERMISSIONS=664
        DEFAULT_VIDEO_LIBRARY_DIRECTORY_PERMISSIONS=775
        SOURCE_ROOT="/dev/null"               # For Plex DVR, this is $VIDEO_WORK_DIRECTORY
                                                                          # For DVDs ripped with MakeMKV, this is $MAKEMKV_OUTPUT_DIRECTORY
        unset SOURCE_FILE_NAME_PATTERN        # For Plex DVR, this is "*.ts"
                                              # For DVDs ripped with MakeMKV, this is "*.mkv"
        TARGET_ROOT="/dev/null"               # For Plex DVR, this is $VIDEO_STORE_DIRECTORY
        unset TARGET_FILE_EXTENSION           # Normally this is ".m4v"
        SET_PLEX_PERMISSIONS=false            # If the output file is part of a Plex Library, this is true; otherwise (default) false
        USE_TV_FILTERS=false                  # Should only be true when converting Plex DVR files. Default is false
        FLATTEN_TARGET_DIRECTORY=false        # Helpful for processing Zoom files or DVD rips. Default is false
        USE_PARENT_DIR_AS_BASENAME=false      # Can be helpful when $FLATTEN_TARGET_DIRECTORY is true
        PREPEND_PARENT_DIR_TO_BASENAME=false  # Can be helpful for processing Zoom files or DVD rips. Default is false
        APPEND_UUID_TO_TARGET_FILE=false              # Helps create uniqueness so you can have multiple versions of a single DVR episode
        unset TARGET_DIR_OWNER                # Will be used only if defined
        unset TARGET_DIR_PERMISSIONS          # Will be used only if defined
        unset TARGET_FILE_OWNER               # Will be used only if defined
        unset TARGET_FILE_PERMISSIONS         # Will be used only if defined

# ssh
# DEPENENT on timestamps above
        SSHD_CONFIG="/etc/ssh/sshd_config"
        SSH_KEY_NAME="$HOSTNAME-$START_DATEANDTIMESTAMP"

# Zoom Transcoding
        ZOOM_RAW_FILES="$ADMIN_HOME_DIR/zoom/raw"
        ZOOM_TRANSCODED_FILES="$ADMIN_HOME_DIR/zoom/transcoded"
        ZOOM_FILE_NAME_PATTERN="*.mp4"

# Filter TV shows that should be skipped by process_ts
# Set them all as true
# Example: IGNORE_TV_SHOW[CBS This Morning]=true
# It doesn't matter what the value is set to, as long as the key is defined
# A match is found if any part of the test string matches. 
#      For example, "IGNORE_TV_SHOW[CBS This Morning]=true" is defined, 
#      "CBS This Morning Saturday" matches
        declare -A IGNORE_TV_SHOW
        IGNORE_TV_SHOW[.grab]=true
#       IGNORE_TV_SHOW[ABC World News Tonight]=true
#       IGNORE_TV_SHOW[BBC World News]=true
#       IGNORE_TV_SHOW[CBS Evening News]=true
#       IGNORE_TV_SHOW[CBS Morning News]=true
#       IGNORE_TV_SHOW[CBS This Morning]=true
#       IGNORE_TV_SHOW[CBS Weekend News]=true
#       IGNORE_TV_SHOW[Channel 13 News]=true
#       IGNORE_TV_SHOW[Face the Nation]=true
#       IGNORE_TV_SHOW[Good Morning Iowa]=true
#       IGNORE_TV_SHOW[Jimmy Kimmel Live]=true
#       IGNORE_TV_SHOW[KCCI 8 News]=true
#       IGNORE_TV_SHOW[KXAN News]=true
#       IGNORE_TV_SHOW[Meet the Press]=true
#       IGNORE_TV_SHOW[NBC Nightly News]=true
#       IGNORE_TV_SHOW[Sunday Today]=true
#       IGNORE_TV_SHOW[The Late Show]=true
#       IGNORE_TV_SHOW[The Tonight Show]=true
#       IGNORE_TV_SHOW[Today (1952)]=true
#       IGNORE_TV_SHOW[Today in Iowa]=true
        # Ref: https://bytefreaks.net/gnulinux/bash/bash-how-to-iterate-over-associative-array-and-print-all-keyvalue-pairs
        IGNORE_TV_SHOWS=""; for KEY in "${!IGNORE_TV_SHOW[@]}"; do IGNORE_TV_SHOWS+="\"$KEY\" "; done

# Paths to Scripts
        declare -A PATHNAME
        PATHNAME[_apply_configs]="$SBIN_DIR/_apply-configs"
        PATHNAME[_functions]="$SBIN_DIR/_functions"
        PATHNAME[_git]="$SBIN_DIR/_git"
        PATHNAME[_run_apt_update]="$SBIN_DIR/_run_apt_update"
        PATHNAME[_upd]="$SBIN_DIR/_upd"
        PATHNAME[_vars]="$SBIN_DIR/_vars"
        PATHNAME[apt_remove_duplicate_source_entries]="$SBIN_DIR/apt-remove-duplicate_source-entries.py"
        PATHNAME[backup]="$SBIN_DIR/backup"
        PATHNAME[backup_file]="$SBIN_DIR/backup-file"
        PATHNAME[cleanup_and_exit]="$SBIN_DIR/cleanup-and-exit"
        PATHNAME[currenttimeinseconds]="$SBIN_DIR/currenttimeinseconds"
        PATHNAME[db_backup]="$SBIN_DIR/db-backup"
        PATHNAME[ddnscheck]="$SBIN_DIR/ddnscheck"
        PATHNAME[get_config]="$SBIN_DIR/get-config"
        PATHNAME[lgh]="$SBIN_DIR/lgh"
        PATHNAME[lhlib]="$SBIN_DIR/lhlib"
        PATHNAME[loop_forever]="$SBIN_DIR/loop-forever"
        PATHNAME[make_letsencrypt_p12_files]="$SBIN_DIR/make-letsencrypt-p12-files"
        PATHNAME[make_passwords]="$SBIN_DIR/make-passwords"
        PATHNAME[make_ssh_keys]="$SBIN_DIR/make-ssh-keys"
        PATHNAME[makemkvcon]="/usr/bin/makemkvcon"
        PATHNAME[master_loop]="$SBIN_DIR/master-loop"
        PATHNAME[move_scans_to_onedrive]="$SBIN_DIR/move-scans-to-onedrive"
        PATHNAME[process_ts]="$SBIN_DIR/process-ts"
        PATHNAME[process_incoming_scans]="$SBIN_DIR/process-incoming-scans"
        PATHNAME[remove_empty_directories]="$SBIN_DIR/remove-empty-directories"
        PATHNAME[replace_in_file]="$SBIN_DIR/replace-in-file"
        PATHNAME[rip]="$SBIN_DIR/rip"
        PATHNAME[script_footer]="$SBIN_DIR/script-footer"
        PATHNAME[script_setup]="$SBIN_DIR/script-setup"
        PATHNAME[secureserver]="$SBIN_DIR/secureserver"
        PATHNAME[show_plex_ts_files]="$SBIN_DIR/show-plex-ts-files"
        PATHNAME[stopwatch]="$SBIN_DIR/stopwatch"
        PATHNAME[syncplex]="$SBIN_DIR/syncplex"
        PATHNAME[tar]="/bin/tar"
        PATHNAME[transcode_ripped_dvds]="$SBIN_DIR/transcode-ripped-dvds"
        PATHNAME[unlockserver]="$SBIN_DIR/unlockserver"
        PATHNAME[upd]="$SBIN_DIR/upd"
        PATHNAME[vaultclose]="$SBIN_DIR/vaultclose"
        PATHNAME[vaultopen]="$SBIN_DIR/vaultopen"
        PATHNAME[vaultsync]="$SBIN_DIR/vaultsync"
        PATHNAME[xfers]="$SBIN_DIR/xfers"

# Require root to run these scripts (default is false or undefined)
# DEPENDENT ON PATHNAME ARRAY DEFINITION ABOVE
# Example: ROOT_REQUIRED[${PATHNAME[lgh]}]=true
# It doesn't matter what the value is set to, as long as the key is defined
        declare -A ROOT_REQUIRED
        ROOT_REQUIRED[${PATHNAME[_apply_configs]}]=true
        ROOT_REQUIRED[${PATHNAME[_git]}]=true
        ROOT_REQUIRED[${PATHNAME[_upd]}]=true
        ROOT_REQUIRED[${PATHNAME[lgh]}]=true
        ROOT_REQUIRED[${PATHNAME[upd]}]=true

# Disable start message for these scripts
# DEPENDENT ON PATHNAME ARRAY DEFINITION ABOVE
# Example: DISABLE_START_MESSAGE[${PATHNAME[lgh]}]=true
# If the variable is defined at all, it resolves to true, even if the assigned falue is false
        declare -A DISABLE_START_MESSAGE
        # DISABLE_START_MESSAGE[${PATHNAME[timeformat]}]=true

# Disable end message for these scripts
# DEPENDENT ON PATHNAME ARRAY DEFINITION ABOVE
# Example: DISABLE_END_MESSAGE[${PATHNAME[lgh]}]=true
# If the variable is defined at all, it resolves to true, even if the assigned falue is false
        declare -A DISABLE_END_MESSAGE
        # DISABLE_END_MESSAGE[${PATHNAME[timeformat]}]=true

# Restrict some scripts to particular hosts.
# If a script pathname is referenced even once, 
#       the script will run only if the hostname is associated with the script pathname.
# Example: RESTRICT_SCRIPT_TO_HOST[${PATHNAME[lgh]}]=oz
        declare -A RESTRICT_SCRIPT_TO_HOST
        RESTRICT_SCRIPT_TO_HOST[${PATHNAME[show_plex_ts_files]}]=oz
        RESTRICT_SCRIPT_TO_HOST[${PATHNAME[process_incoming_scans]}]=oz
        RESTRICT_SCRIPT_TO_HOST[${PATHNAME[process_ts]}]=oz
        RESTRICT_SCRIPT_TO_HOST[${PATHNAME[rip]}]=oz

# Set a flag to confirm that the variables are defined
        VARIABLES_ARE_DEFINED=true

# Log the completion
        if [ ! $DEBUG_MODE ]; then
                logger $0: Variables loaded from _vars
                fi

