#!/bin/bash

###################################################
# Notes
#
# USE "getopt", NOT "getopts" !
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# STRONG RECOMMENDATION: Use getopt and not getopts
#
# DEPRECATED: Initially followed tutorial at https://www.shellscript.sh/tips/getopt/
# New Tutorial: https://www.tutorialspoint.com/unix_commands/getopt.htm
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
#
# Defining terms
#    argument: any text appended to a command (syn.: parameter)
#    parameter: synonym for argument
#    option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#       An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#       All options are arguments, but not all arguments are options.
#    short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#    long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#    switch: a short or long option, with no option argument specified (e.g., -a --argb)
#       All switches are options, but not all options are switches.
#    remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

### FILL IN THESE VARIABLES!!! ###
     PURPOSE="Finds the position of a search-string in a haystack-string" # Don't include $0, e.g., "Saves the world" 
     USAGE="[-vh --help --version] <search-string> <haystack-string>" # Don't include $0, e.g., "[-hqVv --help --quiet --verbose --version] <arg1> <arg2> <arg3>" Can go to multiple lines with \n in the string.
     VERSION_NUMBER="0.1"
     ROOT_REQUIRED=false
     OPTIONS=(
          "-v --version  Display version number, then exit (no other options processed)"
          "-h --help     Display usage and help information, then exit (no other options processed)"
          )
     EXAMPLE_USAGE=(
          "Example usage: $(basename $0) \"<html>\" \"The <html> tag comes first.\""
          "  Returns position of the search-string with exit code 0."
          "  If not found, returns nothing with exit code 173."
          )
     SHORT_GETOPT="hv"; LONG_GETOPT="help,version"

# Stable variables; OK to leave this in without edits.
     ARGS="" # Adapted when flags are parsed.
     COLOPHON="$(printf "\u00A9") $(date +%Y) by Lane Hensley, lane@lanehensley.org, https://lanehensley.org"
     EXIT_CODE_SUCCESS=0
     EXIT_CODE_EPERM=1 # Operation not permitted
     EXIT_CODE_ENOENT=2 # No such file or directory
     EXIT_CODE_EIO=5 # Input/output error
     EXIT_CODE_E2BIG=7 # Argument list too long
     EXIT_CODE_EEXIST=17 # File exists
     EXIT_CODE_ENOTDIR=20 # Not a directory
     EXIT_CODE_EISDIR=21 # Is a directory
     EXIT_CODE_EINVAL=22 # Invalid argument
     EXIT_CODE_EFBIG=27 # File too large
     EXIT_CODE_ERANGE=34 # Numerical result out of range
     EXIT_CODE_INTERNAL_ERROR=161
     EXIT_CODE_INVALID_OPTIONS=162
     EXIT_CODE_ROOT_REQUIRED=163
     EXIT_CODE_UBUNTU_REQUIRED=164
     EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED=165
     EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED=166
     EXIT_CODE_SPECIFIC_SERVER_REQUIRED=167
     EXIT_CODE_USER_ABORT=168
     EXIT_CODE_FILE_NOT_FOUND=169
     EXIT_CODE_DIRECTORY_NOT_FOUND=170
     EXIT_CODE_FILE_IN_USE=171
     EXIT_CODE_WRONG_HOST=172
     EXIT_CODE_INVALID_ARGUMENTS=173
     PROGRAM_NAME="$(basename $0)"
     QUIET_MODE=false
     REDIRECT="/dev/stdout" # Switch to "/dev/null" for quiet mode. This is where text that could be suppressed by quiet mode is directed. 
     VERBOSE_MODE=false


###################################################
# Functions

# LEAVE THIS ALONE!
function f_print_usage {
  printf "%s" "$PROGRAM_NAME $VERSION_NUMBER" >&2
  if [ $# -gt 0 ] ; then echo ": Error: $1" ; else echo "" ; fi
  echo $COLOPHON >&2
  echo Usage: $PROGRAM_NAME $USAGE >&2
  echo Purpose: $PURPOSE >&2
  if $ROOT_REQUIRED ; then echo Requires root or sudo. >&2 ; fi
  echo "Options:" >&2
  for i in "${!OPTIONS[@]}"; do
     echo "  ${OPTIONS[$i]}" >&2
     done
  for i in "${!EXAMPLE_USAGE[@]}"; do
     echo "${EXAMPLE_USAGE[$i]}" >&2
     done
  }


###################################################
# Test for big problems

if $ROOT_REQUIRED && [[ $EUID -ne 0 ]]; then
     f_print_usage "Root privileges required."
     exit EXIT_CODE_ROOT_REQUIRED
     fi


###################################################
# Parse options and arguments with getopt
# READ AND EDIT THIS!

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : Definition of short options
#       --longoptions (--long) : Definition of long options
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet, --test, --unquoted, --version
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   Double Colon after an option means an argument is optional. 
#   The '-- "$@"' at the end means that all other command arguments are "remaining arguments".
# For more info on getopt syntax: https://linux.die.net/man/1/getopt
     PARSED_ARGUMENTS=$(getopt --name $PROGRAM_NAME --options $SHORT_GETOPT \
          --long $LONG_GETOPT -- "$@")
# Taking this out. Not sure what it does.
     # VALID_ARGUMENTS=$?
     #if [ "$VALID_ARGUMENTS" != "0" ] ; then f_print_usage ; exit $EXIT_CODE_INVALID_ARGUMENTS; fi

# Note about next command: 
# By reading that set of standardised arguments into the shell's input arguments 
#   the shell script now thinks that it was called with these simpler, standardised set of arguments.
eval set -- "$PARSED_ARGUMENTS"

while : ; do
    case "$1" in
#       -f | --file )
#          MODE=file
#          string=$(cat "$2")
#          shift 2
#           ;;   
#       -s | --string )
#          MODE=string
#          string="$2"
#          shift 2
#           ;;   
#       -i | --input ) # Doesn't do anything here because it's dealt with in default above.
#          shift 1
#           ;;   
       -h | --help )  # Help, if you're so stupid that you don't get that :)
           f_print_usage
           exit $EXIT_CODE_SUCCESS
           ;;   
      -v | --version)  # Version number
           echo $(basename $0): version $VERSION_NUMBER >&2
           exit $EXIT_CODE_SUCCESS
           ;;
#      -q | --quiet)  # Quiet mode
#          ##### DROP THIS OPTION?
#           QUIET_MODE=true
#           REDIRECT="/dev/null"
#           ARGS+=" --quiet"
#           shift # Only one (default) shift for a switch, i.e., no argument
#           ;;
#      -V | --verbose)  # Verbose mode
#          ##### DROP THIS OPTION?
#           VERBOSE_MODE=true
#           shift # Only one (default) shift for a switch, i.e., no argument
#           ;;
      --) # -- means the end of the arguments; drop this, and break out of the while loop
           shift
           break 
           ;;
      *) # Invalid option.
          f_print_usage "Invalid option."
          exit EXIT_CODE_INVALID_OPTIONS
           ;;
  esac
done


###################################################
# Do the work.
# IMPORTANT NOTES: 
#   Don't forget that you still can read and use environment variables!
#       Best practice: Required values should be required on and read from the command line, not environment variables.
#           Environment variables are fine for optional values.
#   We haven't yet tested for the existence of required options and/or remaining arguments (now $1, $2, etc.)
#   We also haven't yet tested for the valid options arguments and/or remaining arguments (now $1, $2, etc.)

# Review this.
# CHECK FOR CORRECT NUMBER/RANGE OF ARGUMENTS
if [ $# -ne 2 ] ; then
	f_print_usage "Must have exactly two arguments."
	exit $EXIT_CODE_INVALID_ARGUMENTS
     fi

search_string="$1"
haystack="$2"

### https://superuser.com/questions/1001973/bash-find-string-index-position-of-substring
rest=${haystack#*$search_string}
start_byte=$(( ${#haystack} + 1 - ${#rest} - ${#search_string} ))
if [ $start_byte -gt 0 ] ; then
     printf "%d" $start_byte;
     if [ $(cursor --column) -ne 0 ] ; then
          echo "" >&2 # This allows piping the result above to another program, and only issue a newline to the console.
          exit $EXIT_CODE_SUCCESS
          fi
     else
          exit -1
     fi


###################################################
# Wrap up.

exit 0
