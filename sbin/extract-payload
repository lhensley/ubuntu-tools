#!/bin/bash

###################################################
# TO DO:
# Enable -f option.
# Manage presence/absence of -f.
# Detect and manage haystack coming by pipe/stdio
# Manage option of dropping argument 3

###################################################
# Notes
#
# USE "getopt", NOT "getopts" !
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# STRONG RECOMMENDATION: Use getopt and not getopts
#
# DEPRECATED: Initially followed tutorial at https://www.shellscript.sh/tips/getopt/
# New Tutorial: https://www.tutorialspoint.com/unix_commands/getopt.htm
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
#
# Defining terms
#  argument: any text appended to a command (syn.: parameter)
#  parameter: synonym for argument
#  option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#    An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#    All options are arguments, but not all arguments are options.
#  short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#  long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#  switch: a short or long option, with no option argument specified (e.g., -a --argb)
#    All switches are options, but not all options are switches.
#  remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

### FILL IN THESE VARIABLES!!! ###
  PROGRAM_NAME="$(basename $0)"
  PURPOSE="Displays content between specified strings" # Don't include $0, e.g., "Saves the world" 
  USAGE='[-fvh --file --help --version] <begin-bookend-string> <end-bookend-string> [<haystack-string>]' # Don't include $0, e.g., "[-hqVv --help --quiet --verbose --version] <arg1> <arg2> <arg3>" Can go to multiple lines with \n in the string.
  VERSION_NUMBER="0.1"
  ROOT_REQUIRED=false
  OPTIONS=(
    "-f<filename> --file=<filename>"
    "   Contents read as <haystack-string>; drop the third argument if used"
    "-v --version"
    "   Display version number, then exit (no other options processed)"
    "-h --help"
    "   Display usage and help information, then exit (no other options processed)"
    )
  EXAMPLE_USAGE=(
    "Example usages: $PROGRAM_NAME \"<span>\" \"</span>\" \"\$haystack_string\""
    "                $PROGRAM_NAME -f\"~/file.html\" \"<span>\" \"</span>\""
    "                $PROGRAM_NAME --file=\"~/file.html\" \"<span>\" \"</span>\""
    "                cat "\"\$haystack_string\"" | $PROGRAM_NAME \"<span>\" \"</span>\""
    "  Returns position of the search-string with exit code 0."
    "  If not found or error found, returns with non-0 exit code."
    "  The <haystack-string> is determined in this order of precedence:"
    "    The -f\"~/file.html\" or --file=\"~/file.html\" option is set with the arguments"
    "    The optional third argument (\"\$haystack_string\") is specified"
    "    The <haystack-string> is taken from stdin (including piping)"
    )
  SHORT_GETOPT="f:hv"; LONG_GETOPT="file:,help,version"

# Stable variables; OK to leave this in without edits.
  ARGS="" # Adapted when flags are parsed.
  COLOPHON="$(printf "\u00A9") $(date +%Y) by Lane Hensley, lane@lanehensley.org, https://lanehensley.org"
  EXIT_CODE_SUCCESS=0
  EXIT_CODE_EPERM=1 # Operation not permitted
  EXIT_CODE_ENOENT=2 # No such file or directory
  EXIT_CODE_EIO=5 # Input/output error
  EXIT_CODE_E2BIG=7 # Argument list too long
  EXIT_CODE_EEXIST=17 # File exists
  EXIT_CODE_ENOTDIR=20 # Not a directory
  EXIT_CODE_EISDIR=21 # Is a directory
  EXIT_CODE_EINVAL=22 # Invalid argument
  EXIT_CODE_EFBIG=27 # File too large
  EXIT_CODE_ERANGE=34 # Numerical result out of range
  EXIT_CODE_INTERNAL_ERROR=161
  EXIT_CODE_INVALID_OPTIONS=162
  EXIT_CODE_ROOT_REQUIRED=163
  EXIT_CODE_UBUNTU_REQUIRED=164
  EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED=165
  EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED=166
  EXIT_CODE_SPECIFIC_SERVER_REQUIRED=167
  EXIT_CODE_USER_ABORT=168
  EXIT_CODE_FILE_NOT_FOUND=169
  EXIT_CODE_DIRECTORY_NOT_FOUND=170
  EXIT_CODE_FILE_IN_USE=171
  EXIT_CODE_WRONG_HOST=172
  EXIT_CODE_INVALID_ARGUMENTS=173
  QUIET_MODE=false
  REDIRECT="/dev/stdout" # Switch to "/dev/null" for quiet mode. This is where text that could be suppressed by quiet mode is directed. 
  VERBOSE_MODE=false


###################################################
# Functions

# LEAVE THIS ALONE!
function f_print_usage {
  printf "%s" "$PROGRAM_NAME $VERSION_NUMBER" >&2
  if [ $# -gt 0 ] ; then echo ": Error: $1" ; else echo "" ; fi
  echo $COLOPHON >&2
  echo Usage: $PROGRAM_NAME $USAGE >&2
  echo Purpose: $PURPOSE >&2
  if $ROOT_REQUIRED ; then echo Requires root or sudo. >&2 ; fi
  echo "Options:" >&2
  for i in "${!OPTIONS[@]}"; do
    echo "  ${OPTIONS[$i]}" >&2
    done
  for i in "${!EXAMPLE_USAGE[@]}"; do
    echo "${EXAMPLE_USAGE[$i]}" >&2
    done
  }


###################################################
# Test for big problems

if $ROOT_REQUIRED && [[ $EUID -ne 0 ]]; then
  f_print_usage "Root privileges required."
  exit EXIT_CODE_ROOT_REQUIRED
  fi


###################################################
# Parse options and arguments with getopt
# READ AND EDIT THIS!

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : Definition of short options
#       --longoptions (--long) : Definition of long options
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet, --test, --unquoted, --version
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   Double Colon after an option means an argument is optional. 
#   The '-- "$@"' at the end means that all other command arguments are "remaining arguments".
# For more info on getopt syntax: https://linux.die.net/man/1/getopt
  PARSED_ARGUMENTS=$(getopt --name $PROGRAM_NAME --options $SHORT_GETOPT \
    --long $LONG_GETOPT -- "$@")

# Note about next command: 
# By reading that set of standardised arguments into the shell's input arguments 
#   the shell script now thinks that it was called with these simpler, standardised set of arguments.
eval set -- "$PARSED_ARGUMENTS"

unset filename
while : ; do
    case "$1" in
       -f | --file )
           filename="$2"
           shift 2
           ;;   
       -h | --help )  # Help, if you're so stupid that you don't get that :)
           f_print_usage
           exit $EXIT_CODE_SUCCESS
           ;;   
       -v | --version)  # Version number
           echo $PROGRAM_NAME: version $VERSION_NUMBER >&2
           exit $EXIT_CODE_SUCCESS
           ;;
       --) # -- means the end of the arguments; drop this, and break out of the while loop
           shift
           break 
           ;;
       *) # Invalid option.
           f_print_usage "Invalid option."
           exit EXIT_CODE_INVALID_OPTIONS
           ;;
  esac
done


###################################################
# Do the work.

unset haystack_string

# Priority 1: Set with -f or --file options.
if [ -z "$haystack_string" ]; then # If haystack_string is NOT set
     if test -v filename; then # If filename IS set
          if ! test -f "$filename" ; then
               f_print_usage "File not found."
               exit $EXIT_CODE_FILE_NOT_FOUND
               fi
          haystack_string=$(cat "$filename"); 
          haystack_length="${#haystack_string}"
          fi
     fi

# Priority 2: Set as a third argument, <haystack-string>
if [ -z "$haystack_string" ] && [ $# -gt 2 ] ; then # If haystack_string is NOT set
     haystack_string="$3"; 
     haystack_length="${#haystack_string}"
     fi

# Priority 3: Read into stdin (including by pipe)
if [ -z "$haystack_string" ]; then # If haystack_string is NOT set
     if [[ -p /dev/stdin ]] || ! test -t 0 ; then # If any data queued in stdin
          haystack_string=$(cat)
          haystack_length="${#haystack_string}"
          fi
     fi

if [ $# -lt 2 ] || [ $# -gt 3 ]; then
	f_print_usage "Must have two or three arguments."
	exit $EXIT_CODE_INVALID_ARGUMENTS
     fi

begin_bookend_string="$1"; 
     begin_bookend_length=${#begin_bookend_string};
          if [ $begin_bookend_length -lt 1 ] ; then
               f_print_usage "Insufficient text in <begin-bookend-string>"
               exit 1
               fi
     if [[ "$haystack_string" == *"$begin_bookend_string"* ]]; then

################################################################################
##########     UNDER CONSTRUCTION!     #########################################
################################################################################

          ############### SLOW! ###############
          ### Pseudocode:
          ###       Need: haystack_string (done)
          ###             begin_bookend_length (done)
          ###             begin_bookend_position (done)
          ###   remnant_string(rest)=right(haystack_string,len(haystack_string)-(begin_bookend_position+begin_bookend_length))

echo MB
          x=$(grep -oba "$begin_bookend_string" <<< "$haystack_string")
          begin_bookend_position="${x%%":"*}"

echo MA
          remnant_position=$(( begin_bookend_position + begin_bookend_length))

echo A
          rest="${haystack_string:$(( begin_bookend_position + begin_bookend_length - 2 ))}"

echo B
          # rest=${haystack_string#*$begin_bookend_string} ### This call is SLOW on big strings!
          remnant_string=$rest
          # begin_bookend_position=$(( ${#haystack_string} + 1 - ${#rest} - ${#begin_bookend_string} ))
          else
               f_print_usage "<begin-bookend-string> not found in <haystack-string>"
               exit 1
          fi

echo C
# "Remnant" is everything in the haystack AFTER the begin_bookend
# remnant_position=$(( begin_bookend_position + begin_bookend_length ))
remnant_length=$(( haystack_length - remnant_position ))

echo D
end_bookend_string="$2"
     end_bookend_length=${#end_bookend_string};
echo end_bookend_string: $end_bookend_string
# echo end_bookend_position: $end_bookend_position
echo end_bookend_length: $end_bookend_length
echo start of remnant: ${remnant_string:0:30}
     if [ $end_bookend_length -lt 1 ] ; then
echo E
          f_print_usage "Insufficient text in <end-bookend-string>"
          exit 1
          fi
echo "haystack_length (1293891): $haystack_length"
echo "begin_bookend_position (1443): $begin_bookend_position"
echo "begin_bookend_length (6): $begin_bookend_length"
echo "remnant_position (1449): $remnant_position"
echo "remnant_length (1235, calculated): $remnant_length"
echo "end_bookend_position (2684): $end_bookend_position"
echo "end_bookend_length (9): $end_bookend_length"
     if [[ "$remnant_string" == *"$end_bookend_string"* ]]; then
echo F
          ### DUPE OF ABOVE?
          rest=${remnant_string#*$end_bookend_string}
          end_bookend_position=$(( ${#remnant_string} - ${#rest} - ${#end_bookend_string} ))
echo "haystack_length (1293891): $haystack_length"
echo "begin_bookend_position (1443): $begin_bookend_position"
echo "begin_bookend_length (6): $begin_bookend_length"
echo "remnant_position (1449): $remnant_position"
echo "remnant_length (1235, calculated): $remnant_length"
echo "end_bookend_position (2684): $end_bookend_position"
echo "end_bookend_length (9): $end_bookend_length"
     else
echo G
echo "haystack_length (1293891): $haystack_length"
echo "begin_bookend_position (1443): $begin_bookend_position"
echo "begin_bookend_length (6): $begin_bookend_length"
echo "remnant_position (1449): $remnant_position"
echo "remnant_length (1235, calculated): $remnant_length"
echo "end_bookend_position (2684): $end_bookend_position"
echo "end_bookend_length (9): $end_bookend_length"
          f_print_usage "<end-bookend-string> not found in <haystack-string>"
          exit 1
     fi

echo H
payload_length=$(( $end_bookend_position ))
     if [ $payload_length -lt 1 ] ; then
echo I
          f_print_usage "Payload empty"
          exit 1
          fi
echo J
     payload_string=${remnant_string:0:$payload_length}
          if [ -z "${end_bookend_position}" ]; then
echo K
               f_print_usage "Payload empty"
               exit 1
               fi

echo L
printf "%s" "$payload_string"

if [ $(cursor --column) -ne 0 ] ; then
     echo "" >&2 # This allows piping the result above to another program, and only issue a newline to the console.
     fi

echo "haystack_length (1293891): $haystack_length"
echo "begin_bookend_position (1443): $begin_bookend_position"
echo "begin_bookend_length (6): $begin_bookend_length"
echo "remnant_position (1449): $remnant_position"
echo "remnant_length (1235, calculated): $remnant_length"
echo "end_bookend_position (2684): $end_bookend_position"
echo "end_bookend_length (9): $end_bookend_length"

###################################################
# Wrap up.

exit 0
