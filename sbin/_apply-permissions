#!/bin/bash
#_apply-permissions

###################################################
# Notes
#
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# STRONG RECOMMENDATION: Use getopt and not getopts
# Following tutorial at https://www.shellscript.sh/tips/getopt/
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
# Defining terms
#    argument: any text appended to a command (syn.: parameter)
#    parameter: synonym for argument
#    option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#       An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#       All options are arguments, but not all arguments are options.
#    short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#    long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#    switch: a short or long option, with no option argument specified (e.g., -a --argb)
#       All switches are options, but not all options are switches.
#    remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 61; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 61; fi
# Uncomment requirements for script execution
	f_require_root
    # f_require_ubuntu
    # f_deprecated
    # f_require_minimum_version_number "version-number"
    # f_require_maximum_version_number "version-number"
    # f_only_on_server "hostname"
    # f_require_confirmation "This text is displayed, requesting confirmation word." "ConfirmationWord"
    # set -x # For debugging


###################################################
# Functions

function f_print_usage {
  echo
  echo Usage: $(basename "$0") [-pqVv -set-plex-file-permissions --quiet --verbose --version --help]
  echo "Version $VERSION_NUMBER"
  echo Apply selected permissions on local system.
  echo Requires root or sudo.
  echo
  echo "Options:"
  echo "  -p --set-plex-file-permissions    Updates Plex Media Server file permissions globally. May take a while."
  echo "  -q --quiet                        Mimimal output"
  echo "  -V --verbose                      Verbose output"
  echo "  -v --version                      Display version number, then exit (no other options processed)"
  echo "  --help                            Display usage and help information, then exit (no other options processed)"
  echo
  echo "Example usage: " [sudo] $(basename "$0") --set-plex-file-permissions
  echo
  # Describe any exit codes returned. For examples below, comment out any unused values. EXAMPLE:
  echo Return values:
  echo "  " $EXIT_CODE_SUCCESS on success,
  echo "  " $EXIT_CODE_INTERNAL_ERROR on internal error,
  echo "  " $EXIT_CODE_INVALID_OPTIONS if invalid options specified,
  echo "  " $EXIT_CODE_ROOT_REQUIRED if root required,
  # echo "  " $EXIT_CODE_UBUNTU_REQUIRED if Ubuntu required,
  # echo "  " $EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED if minimum OS version required,
  # echo "  " $EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED if maximum OS version required,
  # echo "  " $EXIT_CODE_SPECIFIC_SERVER_REQUIRED if specific server required,
  # echo "  " $EXIT_CODE_FILE_NOT_FOUND if file not found,
  # echo "  " $EXIT_CODE_DIRECTORY_NOT_FOUND if directory not found,
  # echo "  " $EXIT_CODE_FILE_IN_USE if file in use,
  echo "  " $EXIT_CODE_USER_ABORT on user abort,
  echo "  " $EXIT_CODE_SEGMENTATION_ERROR on segmentation error
  echo
}


###################################################
# Set default variable values
VERSION_NUMBER="0.1.x"
QUIET_MODE=false
VERBOSE_MODE=false
ARGS="" # Add arguments to primary function called as needed
REDIRECT="/dev/stdout" # Switch to "/dev/null" for quiet mode
SET_PLEX_FILE_PERMISSIONS=false
# Option arguments can remain undefined.


###################################################
# Parse options and arguments with getopt

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : Definition of short options
#       --longoptions (--long) : Definition of long options
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet, --test, --unquoted, --version
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   The '-- "$@"' at the end means that all other command arguments are "remaining arguments".
PARSED_ARGUMENTS=$(getopt --name $(basename "$0") --options pVvq \
    --long help,quiet,set-plex-file-permissions,verbose,version \
    -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then f_print_usage; exit $EXIT_CODE_INVALID_ARGUMENTS; fi
# Note about next command: 
# By reading that set of standardised arguments into the shell's input arguments 
#   the shell script now thinks that it was called with these simpler, standardised set of arguments.
eval set -- "$PARSED_ARGUMENTS"

while : ; do
    case "$1" in
	  # IMPORTANT: Make sure --help is the first case option so that -? (wildcard) will be caught here.
	  # But DON'T include -? in the call to getopt, or in the --help case option.
      --help )
           f_print_usage
           exit $EXIT_CODE_SUCCESS
           ;;   
      -v | --version)  # Version number
           echo $VERSION_NUMBER
           exit $EXIT_CODE_SUCCESS
           ;;
      -q | --quiet)  # Quiet mode
           QUIET_MODE=true
           REDIRECT="/dev/null"
           ARGS+=" --quiet"
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      -V | --verbose)  # Verbose mode
           VERBOSE_MODE=true
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      -p | --set-plex-file-permissions)  # Set Plex Media Server video file permissions
           SET_PLEX_FILE_PERMISSIONS=true
           ARGS+=" --set-plex-file-permissions"
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      --) # -- means the end of the arguments; drop this, and break out of the while loop
           shift
           break 
           ;;
      *) f_die "Unexpected option: $1 - Script programming error. Valid option has no handler." false $EXIT_CODE_INTERNAL_ERROR
           ;;
  esac
done


###################################################
# Do the work.
# IMPORTANT NOTES: 
#   Don't forget that you still can read and use environment variables!
#       Best practice: Required values should be required on and read from the command line, not environment variables.
#           Environment variables are fine for optional values.
#   We haven't yet tested for the existence of required options and/or remaining arguments (now $1, $2, etc.)
#   We also haven't yet tested for the valid options arguments and/or remaining arguments (now $1, $2, etc.)

	echo Applying permissions
	echo

	# /etc/comskip
			echo "Updating permissions for /etc/comskip"
			chmod -fR 644 /etc/comskip
			chmod 755 /etc/comskip

	# Set /etc/ddclient
		if $(f_is_installed "ddclient"); then
			echo "Updating permissions for /etc/ddclient"
			chmod -f 600 /etc/ddclient.conf /etc/ddclient/ddclient.conf /etc/default/ddclient # confirmed value
			chown -f $ROOT_USER:$ROOT_USER /etc/ddclient.conf /etc/ddclient/ddclient.conf /etc/default/ddclient
			fi

	# /etc/.dynu.com
		if [ -f /etc/.dynu.com ]; then
			echo "Updating permissions for /etc/.dynu.com"
			chmod -f 700 /etc/.dynu.com
			fi

	# /etc/exports
		if $(f_is_installed "nfs-kernel-server"); then
			echo "Updating permissions for /etc/exports"
			chmod -f 600 "/etc/exports"
			fi

	# /etc/fstab
		echo "Updating permissions for /etc/fstab*"
		chmod -f 644 /etc/fstab* # NOT 600. Apps need to read it. Esp k8s 9/17/2023 -LH
		chown -f $ROOT_USER:$ROOT_USER /etc/fstab*

	# /etc/HandBrake
			echo "Updating permissions for /etc/HandBrake"
			chmod -fR 644 /etc/HandBrake
			chmod 755 /etc/HandBrake

	# /etc/hosts
		echo "Updating permissions for /etc/hosts"
		chmod -f 644 /etc/hosts

	# /etc/lsyncd
		if $(f_is_installed "lsyncd"); then
			echo "Updating permissionf for lsyncd"
			chown -f $ROOT_USER:$ROOT_USER /etc/lsyncd/lsyncd.conf.lua
			chmod -f 600 /etc/lsyncd/lsyncd.conf.lua
			fi

	# /etc/motd
		if [ -f /etc/motd ]; then
			echo "Updating permissions for /etc/motd"
			chmod -f 644 /etc/motd
			fi

	# /etc/netplan
		if $(f_is_directory "/etc/netplan"); then
			echo "Updating permissions for /etc/netplan/*"
			chmod -f 400 "/etc/netplan/*"
			fi

	# /etc/resolvconf
		if $(f_is_installed "resolvconf"); then
			echo Updating permissions for /etc/resolvconf/resolv.conf.d/head
			chown -f $ROOT_USER:$ROOT_USER /etc/resolvconf/resolv.conf.d/head # NOT confirmed; relevant to system viability?
			chmod -f 644 /etc/resolvconf/resolv.conf.d/head # NOT confirmed; relevant to system viability?
			fi
	
	# /etc/ssl
			echo "Updating permissions for /etc/ssl/*.cnf"
			chmod -f 644 /etc/ssl/*.cnf

	# /etc/ufw/applications.d
		echo Updating permissions for /etc/ufw/applications.d
		chown -f $ROOT_USER:$ROOT_USER /etc/ufw/applications.d
		chmod -f 644 /etc/ufw/applications.d/*

	# Git
		echo "Updating permissions for git"
		chmod -f 600 $ROOT_HOME_DIR/.gitconfig
		chmod -f 600 $ADMIN_HOME_DIR/.gitconfig
		chown -f $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.gitconfig
		chown -f $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.gitconfig
		chmod -f -R 400 $GIT_ROOT/*

	# Set /home/lhensley/.coldstorage.log
		echo "Updating permissions for $COLD_BACKUP_LOG"
		chmod -f 600 $COLD_BACKUP_LOG
		chown -f $ROOT_USER:$ROOT_USER $COLD_BACKUP_LOG

	# /home/lhensley/vim Vim and vi config files
		echo Updating permissions for "$ADMIN_HOME_DIR/.vim*" and "$ROOT_HOME_DIR/.vim*"
		chmod -f 600 "$ADMIN_HOME_DIR/.vim*"
		chmod -f 600 "$ROOT_HOME_DIR/.vim*"
		chown -f $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.vim*"
		chown -f $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.vim*"

	# Set /lib/systemd/system ownership and permissions for $SERVICES_DIR
		echo Updating permissions for $SERVICES_DIR
		chown -R $ROOT_USER:$ROOT_USER $SERVICES_DIR
		find $SERVICES_DIR -type d -print -exec chmod $PERMISSIONS_SERVICES_DIR {} \; >> /dev/null 2>&1
		find $SERVICES_DIR -type f -print -exec chmod $PERMISSIONS_SERVICES_FILES {} \; >> /dev/null 2>&1
		
	# MySQL
		if $(f_is_installed "mysql-server"); then
			echo "Updating permissions for MySQL"
			chown -R $ROOT_USER:$ROOT_USER /etc/mysql
			chmod 755 /etc/mysql /etc/mysql/conf.d /etc/mysql/mysql.conf.d
			chmod 600 /etc/mysql/debian.cnf
			chmod 755 /etc/mysql/debian-start
			chmod 644 /etc/mysql/my.cnf.fallback /etc/mysql/mysql.cnf
			chmod 644 /etc/mysql/conf.d/mysql.cnf
			chmod 644 /etc/mysql/conf.d/mysqldump.cnf
			chmod 644 /etc/mysql/mysql.conf.d/mysql.cnf
			chmod 644 /etc/mysql/mysql.conf.d/mysqld.cnf
#			chown -fR $ROOT_USER:$ROOT_USER /etc/mysql
#			chmod -fR 644 /etc/mysql
#			chmod -f 600 /etc/mysql/debian.cnf
#			chmod -f 755 /etc/mysql
#			chmod -f 755 /etc/mysql/conf.d
#			chmod -f 755 /etc/mysql/mysql.conf.d
#			chmod -f 755 /etc/mysql/debian-start
			fi

	# MakeMKV
		if $(f_is_installed "makemkv-bin"); then
			echo "Updating permissions for MakeMKV"
			chmod -f 700 "$ADMIN_HOME_DIR/.MakeMKV"
			chmod -f 700 "$ROOT_HOME_DIR/.MakeMKV"
			chmod -fR 600 "$ADMIN_HOME_DIR/.MakeMKV"/*
			chmod -fR 600 "$ROOT_HOME_DIR/.MakeMKV"/*
			chown -fR $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.MakeMKV"
			chown -fR $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.MakeMKV"
			fi

	# ~/.ssh
#		if $(f_is_installed "ssh"); then
			echo Updating permissions for $ADMIN_HOME_DIR/.ssh and $ROOT_HOME_DIR/.ssh
			chown -fR $ADMIN_USER:$ADMIN_USER $ADMIN_HOME_DIR/.ssh
			chown -fR $ROOT_USER:$ROOT_USER $ROOT_HOME_DIR/.ssh
			chmod -f 700 $ADMIN_HOME_DIR/.ssh $ROOT_HOME_DIR/.ssh
			chmod -f 600 $ADMIN_HOME_DIR/.ssh/* $ROOT_HOME_DIR/.ssh/*
			chmod -f 644 $ADMIN_HOME_DIR/.ssh/*.pub $ROOT_HOME_DIR/.ssh/*.pub
#			fi

	# SSHD config file
		if $(f_is_installed "ssh"); then
			echo Updating permissions for "$SSHD_CONFIG"
			chown -f $ROOT_USER:$ROOT_USER "$SSHD_CONFIG"
			chmod -f 600 "$SSHD_CONFIG"
			fi

	# HandBrake config files
		if $(f_is_installed "handbrake-cli"); then
			echo Updating permissions for "$ADMIN_HOME_DIR/.HandBrake" and "$ROOT_HOME_DIR/.HandBrake"
			chmod -f 700 "$ADMIN_HOME_DIR/.HandBrake"
			chmod -f 700 "$ROOT_HOME_DIR/.HandBrake"
			chmod -f -R 600 "$ADMIN_HOME_DIR/.HandBrake"/*
			chmod -f -R 600 "$ROOT_HOME_DIR/.HandBrake"/*
			chown -f -R $ADMIN_USER:$ADMIN_USER "$ADMIN_HOME_DIR/.HandBrake" $ADMIN_HOME_DIR/Videos/*
			chown -f -R $ROOT_USER:$ROOT_USER "$ROOT_HOME_DIR/.HandBrake"
			fi

	# Plex Media Server Video Files
		echo Updating permissions for Plex
		if $(f_is_installed "plexmediaserver"); then
			if $SET_PLEX_FILE_PERMISSIONS; then
				echo Applying Plex permissions ... > $REDIRECT
				f_set_plex_media_recursive_permissions > /dev/null
				fi
			fi

	# phpmyadmin
		if $(f_is_installed "phpmyadmin"); then
			echo Updating permissions for $PHPMYADMIN_DIR
			chown -fR root:root $PHPMYADMIN_DIR
			chmod -f 644 $PHPMYADMIN_DIR/config.inc.php
			fi

	# Set /usr/local/sbin ownership and permissions for $SBIN_DIR
		echo Updating permissions for $SBIN_DIR
		chown -R $ROOT_USER:$ROOT_USER $SBIN_DIR
		chmod -R $PERMISSIONS_SBIN $SBIN_DIR

	# Exceptions: These can be read or run by anyone
		echo "Updating permissions for some required exceptions"
#		# 2/16/2022: Not sure why it's necessary to confirm existence of these files except to keep chmod from failing below,
#		# which can be managed with the --silent flag. Added that to all chmods below.
#		# Confirm that referenced files below exist.
#			f_require_file "${PATHNAME[_functions]}" 
#			f_require_file "${PATHNAME[_vars]}"
#			f_require_file "${PATHNAME[makemkvcon]}"
#			f_require_file "${PATHNAME[rip]}"
#			f_require_file "${PATHNAME[script_footer]}"
#			f_require_file "${PATHNAME[script_setup]}"
#			# f_require_file "${PATHNAME[upd]}"
#			# f_require_file "${PATHNAME[_apply_configs]}"
		# These based on functional requirements
			echo " " ${PATHNAME[makemkvcon]}
			chmod --silent $PERMISSIONS_SCRIPT_makemkvcon "${PATHNAME[makemkvcon]}"
			echo " " ${PATHNAME[_functions]}
			chmod --silent $PERMISSIONS_SCRIPT__functions "${PATHNAME[_functions]}"
			echo " " ${PATHNAME[_vars]}
			chmod --silent $PERMISSIONS_SCRIPT__vars "${PATHNAME[_vars]}"
			echo " " ${PATHNAME[remove_empty_directories]}
			chmod --silent $PERMISSIONS_SCRIPT_remove_empty_directories "${PATHNAME[remove_empty_directories]}"
			echo " " ${PATHNAME[rip]}
			chmod --silent $PERMISSIONS_SCRIPT_rip "${PATHNAME[rip]}"
			echo " " ${PATHNAME[script_footer]}
			chmod --silent $PERMISSIONS_SCRIPT_script_footer "${PATHNAME[script_footer]}" 
			echo " " ${PATHNAME[script_setup]}
			chmod --silent $PERMISSIONS_SCRIPT_script_setup "${PATHNAME[script_setup]}" 
		# These based on desire. CAUTION: Don't expose anything that has a password or code in it.
			# chmod 740 "${PATHNAME[upd]}"
			# chmod 740 "${PATHNAME[_apply_configs]}"

###################################################
# Wrap up.

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"
