#!/bin/bash

###################################################
# Notes
#
# USE "getopt", NOT "getopts" !
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# STRONG RECOMMENDATION: Use getopt and not getopts
#
# DEPRECATED: Initially followed tutorial at https://www.shellscript.sh/tips/getopt/
# New Tutorial: https://www.tutorialspoint.com/unix_commands/getopt.htm
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
#
# Defining terms
#    argument: any text appended to a command (syn.: parameter)
#    parameter: synonym for argument
#    option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#       An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#       All options are arguments, but not all arguments are options.
#    short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#    long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#    switch: a short or long option, with no option argument specified (e.g., -a --argb)
#       All switches are options, but not all options are switches.
#    remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

### FILL IN THESE VARIABLES!!! ###
     COLOPHON="(c) $(date +%Y) by Lane Hensley, lane@lanehensley.org, https://lanehensley.org"
     PURPOSE="Adds escape codes to a string" # Don't include $0, e.g., "Prints the first 5 characters of a string" 
     USAGE="[-ifshv --input --file= --string= --help --version]" # Don't include $0, e.g., "[-hqVv --help --quiet --verbose --version] <arg1> <arg2> <arg3>" Can go to multiple lines with \n in the string.
     VERSION_NUMBER="0.1"
     QUIET_MODE=false
     VERBOSE_MODE=false

# Stable variables; OK to leave this in without edits.
     ARGS="" # Adapted when flags are parsed.
     EXIT_CODE_SUCCESS=0
     EXIT_CODE_EPERM=1 # Operation not permitted
     EXIT_CODE_ENOENT=2 # No such file or directory
     EXIT_CODE_EIO=5 # Input/output error
     EXIT_CODE_E2BIG=7 # Argument list too long
     EXIT_CODE_EEXIST=17 # File exists
     EXIT_CODE_ENOTDIR=20 # Not a directory
     EXIT_CODE_EISDIR=21 # Is a directory
     EXIT_CODE_EINVAL=22 # Invalid argument
     EXIT_CODE_EFBIG=27 # File too large
     EXIT_CODE_ERANGE=34 # Numerical result out of range
     EXIT_CODE_INTERNAL_ERROR=161
     EXIT_CODE_INVALID_OPTIONS=162
     EXIT_CODE_ROOT_REQUIRED=163
     EXIT_CODE_UBUNTU_REQUIRED=164
     EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED=165
     EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED=166
     EXIT_CODE_SPECIFIC_SERVER_REQUIRED=167
     EXIT_CODE_USER_ABORT=168
     EXIT_CODE_FILE_NOT_FOUND=169
     EXIT_CODE_DIRECTORY_NOT_FOUND=170
     EXIT_CODE_FILE_IN_USE=171
     EXIT_CODE_WRONG_HOST=172
     EXIT_CODE_INVALID_ARGUMENTS=173
     PROGRAM_NAME=$(basename "$0")
     REDIRECT="/dev/stdout" # Switch to "/dev/null" for quiet mode. This is where text that could be suppressed by quiet mode is directed. 

###################################################
# Functions
# EDIT THIS!

function f_print_usage {
  echo "$PROGRAM_NAME version $VERSION_NUMBER" >&2
  echo Usage: $PROGRAM_NAME $USAGE >&2
  echo Purpose: $PURPOSE >&2
#  echo Requires root or sudo. >&2
  echo >&2
  echo "Options:" >&2
  echo "  -i --input                                      Use standard input for input (default)" >&2
  echo "  -f<source-file-name> --file=<source-file-name>  Use specified file contents for input" >&2
  echo "  -s<source-string> --string=<source-string>      Use specified string for input" >&2
  echo "    IMPORTANT: The three lines above are mutually exclusive. Detault is -i or --input" >&2
#  echo "  -q --quiet                                        Mimimal output" >&2
#  echo "  -V --verbose                                      Verbose output" >&2
  echo "  -v --version                                      Display version number, then exit" >&2
#  echo "                                                    (no other options processed)" >&2
  echo "  -h --help                                       Display usage and help information," >&2
  echo "                                                  then exit (no other options processed)" >&2
  echo >&2
  echo "Example usages: echo \$string |" $(basename "$0") -i >&2
  echo "                echo \$string |" $(basename "$0") --input >&2
  echo "                cat <filename> |" $(basename "$0") -i >&2
  echo "                cat <filename> |" $(basename "$0") --input >&2
  echo "                "$(basename "$0") -f\<source-file-name\> >&2
  echo "                "$(basename "$0") -file=\<source-file-name\> >&2
  echo "                "$(basename "$0") -s\<\$source-string\> >&2
  echo "                "$(basename "$0") -string=\<\$source-string\> >&2
     #  # Describe any exit codes returned. For examples below, comment out any unused values. EXAMPLE:
     #  echo Return values: >&2
     #  echo "  " $EXIT_CODE_SUCCESS on success, >&2
     #  echo "  " $EXIT_CODE_INTERNAL_ERROR on internal error, >&2
     #  echo "  " $EXIT_CODE_INVALID_OPTIONS if invalid options specified, >&2
     #  echo "  " $EXIT_CODE_ROOT_REQUIRED if root required, >&2
     #  # echo "  " $EXIT_CODE_UBUNTU_REQUIRED if Ubuntu required, >&2
     #  # echo "  " $EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED if minimum OS version required, >&2
     #  # echo "  " $EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED if maximum OS version required, >&2
     #  # echo "  " $EXIT_CODE_SPECIFIC_SERVER_REQUIRED if specific server required, >&2
     #  # echo "  " $EXIT_CODE_FILE_NOT_FOUND if file not found, >&2
     #  # echo "  " $EXIT_CODE_DIRECTORY_NOT_FOUND if directory not found, >&2
     #  # echo "  " $EXIT_CODE_FILE_IN_USE if file in use, >&2
     #  echo "  " $EXIT_CODE_USER_ABORT on user abort >&2
     #  echo >&2
   echo  >&2 ; echo $COLOPHON >&2
 }

function f_alert () {
	# Information for user.
     # Variable 1: Error or other message (e.g., "File not found")
     echo "$(basename $0) version $VERSION_NUMBER: $1" >&2
	echo "Usage: $(basename $0) $USAGE" >&2
     echo "Purpose: $PURPOSE" >&2
     echo "$COLOPHON" >&2
	}


###################################################
# Parse options and arguments with getopt
# READ AND EDIT THIS!

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : Definition of short options
#       --longoptions (--long) : Definition of long options
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet, --test, --unquoted, --version
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   Double Colon after an option means an argument is optional. 
#   The '-- "$@"' at the end means that all other command arguments are "remaining arguments".
PARSED_ARGUMENTS=$(getopt --name $(basename "$0") --options f:his:v \
    --long file:,help,input,string:,version \
    -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then f_print_usage; exit $EXIT_CODE_INVALID_ARGUMENTS; fi

# Note about next command: 
# By reading that set of standardised arguments into the shell's input arguments 
#   the shell script now thinks that it was called with these simpler, standardised set of arguments.
eval set -- "$PARSED_ARGUMENTS"

# Setting default
unset string
if [[ -p /dev/stdin ]] || ! test -t 0 ; then  # Testing for anything at standard input
     while IFS= read -r line; do
          if [[ -z "$content" ]]; then
               string="$line"
               else string="$string"$'\n'"$line"
               fi
          done
     fi

while : ; do
    case "$1" in
       -f | --file )
          MODE=file
          string=$(cat "$2")
          shift 2
           ;;   
       -s | --string )
          MODE=string
          string="$2"
          shift 2
           ;;   
       -i | --input ) # Doesn't do anything here because it's dealt with in default above.
          shift 1
           ;;   
       -h | --help )  # Help, if you're so stupid that you don't get that :)
           f_print_usage
           exit $EXIT_CODE_SUCCESS
           ;;   
      -v | --version)  # Version number
           echo $(basename $0): version $VERSION_NUMBER >&2
           exit $EXIT_CODE_SUCCESS
           ;;
#      -q | --quiet)  # Quiet mode
#           QUIET_MODE=true
#           REDIRECT="/dev/null"
#           ARGS+=" --quiet"
#           shift # Only one (default) shift for a switch, i.e., no argument
#           ;;
#      -V | --verbose)  # Verbose mode
#           VERBOSE_MODE=true
#           shift # Only one (default) shift for a switch, i.e., no argument
#           ;;
      --) # -- means the end of the arguments; drop this, and break out of the while loop
           shift
           break 
           ;;
      *) # Invalid option.
          f_alert "Invalid option."
          exit EXIT_CODE_INVALID_OPTIONS
           ;;
  esac
done

# Review this.
# CHECK FOR CORRECT NUMBER/RANGE OF ARGUMENTS
if [ $# -ne 0 ]; 
     then echo "Invalid number of arguments." >&2
	f_print_usage
	exit $EXIT_CODE_INVALID_ARGUMENTS
fi


###################################################
# Do the work.
# IMPORTANT NOTES: 
#   Don't forget that you still can read and use environment variables!
#       Best practice: Required values should be required on and read from the command line, not environment variables.
#           Environment variables are fine for optional values.
#   We haven't yet tested for the existence of required options and/or remaining arguments (now $1, $2, etc.)
#   We also haven't yet tested for the valid options arguments and/or remaining arguments (now $1, $2, etc.)

printf "%q" "$string"
if [ $(cursor --column) -ne 0 ] ; then
     echo "" >&2 # This allows piping the result above to another program, and only issue a newline to the console.
     fi

exit 0


###################################################
# Wrap up.

exit 0
