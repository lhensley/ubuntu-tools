#!/bin/bash

DEBUG_MODE=true; if $DEBUG_MODE ; then echo "DEBUG EXECUTING $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
# if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

###################################################
# Notes
#
# "getopts" is built into shell, which makes it run faster then "getopt", which is an external command
# But "getopts" does not support long command line arguments (e.g., shellscriptname --argument=value)
# STRONG RECOMMENDATION: Use getopt and not getopts
# DEPRECATED: Initially followed tutorial at https://www.shellscript.sh/tips/getopt/
# New Tutorial: https://www.tutorialspoint.com/unix_commands/getopt.htm
# man page for getopt is at https://man7.org/linux/man-pages/man1/getopt.1.html
# Defining terms
#    argument: any text appended to a command (syn.: parameter)
#    parameter: synonym for argument
#    option: a command argument preceded by a single or double hyphen (e.g., -o, or --option)
#       An option may have an argument of its own (an "option argument", e.g., -o value-o, or --option value-o, or --option=value-o)
#       All options are arguments, but not all arguments are options.
#    short option: an option consisting of single hyphen and letter, with or without an option argument specified (e.g., -a value-a -b)
#    long option: an option consisting of a double hyphen and word, with or without an option argument specified (e.g., --arga value-a --argb=value-b --argc)
#    switch: a short or long option, with no option argument specified (e.g., -a --argb)
#       All switches are options, but not all options are switches.
#    remaining arguments: command line arguments that are neither options nor option arguments


###################################################
# Basic Setup

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 61; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 61; fi

# Uncomment requirements for script execution
	f_require_root
    # f_require_ubuntu
    # f_deprecated
    # f_require_minimum_version_number "version-number"
    # f_require_maximum_version_number "version-number"
    # f_only_on_server "hostname"
    # f_require_confirmation "This text is displayed, requesting confirmation word." "ConfirmationWord"
    # set -x # For debugging


###################################################
# Functions

function f_print_usage {
  echo
  echo Usage: $(basename "$0") [-pqVv -set-plex-file-permissions --quiet --verbose --version --help]
  echo "Version $VERSION_NUMBER"
  echo Issues a pull request to github repository and updates files, permissions, and configurations on local system accordingly.
  echo Requires root or sudo.
  echo
  echo "Options:"
  echo "  -p --set-plex-file-permissions    Updates Plex Media Server file permissions globally. May take a while."
  echo "  -q --quiet                        Mimimal output"
  echo "  -V --verbose                      Verbose output"
  echo "  -v --version                      Display version number, then exit (no other options processed)"
  echo "  --help                            Display usage and help information, then exit (no other options processed)"
  echo
  echo "Example usage: " [sudo] $(basename "$0") --set-plex-file-permissions
  echo
  # Describe any exit codes returned. For examples below, comment out any unused values. EXAMPLE:
  echo Return values:
  echo "  " $EXIT_CODE_SUCCESS on success,
  echo "  " $EXIT_CODE_INTERNAL_ERROR on internal error,
  echo "  " $EXIT_CODE_INVALID_OPTIONS if invalid options specified,
  echo "  " $EXIT_CODE_ROOT_REQUIRED if root required,
  # echo "  " $EXIT_CODE_UBUNTU_REQUIRED if Ubuntu required,
  # echo "  " $EXIT_CODE_MINIMUM_OS_VERSION_REQUIRED if minimum OS version required,
  # echo "  " $EXIT_CODE_MAXIMUM_OS_VERSION_REQUIRED if maximum OS version required,
  # echo "  " $EXIT_CODE_SPECIFIC_SERVER_REQUIRED if specific server required,
  # echo "  " $EXIT_CODE_FILE_NOT_FOUND if file not found,
  # echo "  " $EXIT_CODE_DIRECTORY_NOT_FOUND if directory not found,
  # echo "  " $EXIT_CODE_FILE_IN_USE if file in use,
  echo "  " $EXIT_CODE_USER_ABORT on user abort
  echo
}

            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

###################################################
# Set default variable values
VERSION_NUMBER="0.2"
# 0.2 adds the ability to pull branches other than master (default)
QUIET_MODE=false
VERBOSE_MODE=false
ARGS="" # Add arguments to primary function called as needed
REDIRECT="/dev/stdout" # Switch to "/dev/null" for quiet mode
SET_PLEX_FILE_PERMISSIONS=false
# Option arguments can remain undefined.


###################################################
# Parse options and arguments with getopt

# Note about the following call to getopt
#   Options used here with the getopt command itself
#       --name : Script name, used for reporting errors
#       --options : Definition of short options
#       --longoptions (--long) : Definition of long options
#   Options used used with the getopt command itself
#       --alternative : Allow long options to start with a single '-'.
#       --help : Display help text and exit.  No other output is generated.
#       --quiet, --test, --unquoted, --version
#   Colon after an option means an argument is required. 
#       In this example, options A, B, and C are switches; a, b, and c expect arguments
#       Similarly for long options, options optionA, optionB, and optionC are switches; optiona, optionb, and optionc expect arguments
#   The '-- "$@"' at the end means that all other command arguments are "remaining arguments".
PARSED_ARGUMENTS=$(getopt --name $(basename "$0") --options pVvq \
    --long help,quiet,set-plex-file-permissions,verbose,version \
    -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then f_print_usage; exit $EXIT_CODE_INVALID_ARGUMENTS; fi
# Note about next command: 
# By reading that set of standardised arguments into the shell's input arguments 
#   the shell script now thinks that it was called with these simpler, 
#   standardised set of arguments.
eval set -- "$PARSED_ARGUMENTS"

while : ; do
    case "$1" in
      --help )
           f_print_usage
           exit $EXIT_CODE_SUCCESS
           ;;   
      -v | --version)  # Version number
           echo $VERSION_NUMBER
           exit $EXIT_CODE_SUCCESS
           ;;
      -q | --quiet)  # Quiet mode
           QUIET_MODE=true
           REDIRECT="/dev/null"
           ARGS+=" --quiet"
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      -V | --verbose)  # Verbose mode
           VERBOSE_MODE=true
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      -p | --set-plex-file-permissions)  # Set Plex Media Server video file permissions
           SET_PLEX_FILE_PERMISSIONS=true
           ARGS+=" --set-plex-file-permissions"
           shift # Only one (default) shift for a switch, i.e., no argument
           ;;
      --) # -- means the end of the arguments; drop this, and break out of the while loop
           shift
           break 
           ;;
      *) f_die "Unexpected option: $1 - Script programming error. Valid option has no handler." false $EXIT_CODE_INTERNAL_ERROR
           ;;
  esac
done


###################################################
# Do the work.
# IMPORTANT NOTES: 
#   Don't forget that you still can read and use environment variables!
#       Best practice: Required values should be required on and read from the command line, not environment variables.
#           Environment variables are fine for optional values.
#   We haven't yet tested for the existence of required options and/or remaining arguments (now $1, $2, etc.)
#   We also haven't yet tested for the valid options arguments and/or remaining arguments (now $1, $2, etc.)
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

# if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

# DROP THIS SECTION. Not storing the token locally.
# # Install git token
# # To get a new token, go to https://github.com/settings/tokens.
# 	git config --global url."https://api:$GIT_TOKEN@github.com/".insteadOf "https://github.com/" > $REDIRECT
# 	git config --global url."https://ssh:$GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/" > $REDIRECT
# 	git config --global url."https://git:$GIT_TOKEN@github.com/".insteadOf "git@github.com:" $> $REDIRECT

# This section re-pulls all go files from github and updates $SBIN_DIR
	# Change to local repository directory
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
		CURRENT_DIRECTORY=$(pwd)
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
		cd $GIT_UBUNTU_TOOLS
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

    # 2024-07-23 Updating the "sync" sequence that had been in place:
        # # Blow away any local changes not uploaded to github
        #     echo
        #     echo "Removing any local changes not uploaded to GitHub"
        #     git reset --hard > $REDIRECT
        # # Select the designated branch
        #     echo
        #     echo "Checking out branch $GIT_BRANCH"
        #     git checkout $GIT_BRANCH > $REDIRECT
        # # Pull down a copy of the repository
        #     echo
        #     echo "Pulling the respository from GitHub"
        #     git pull > $REDIRECT

    # 2024-07-23 Updated "sync" sequence based on https://stackoverflow.com/questions/18529206
        # Stash your local changes:
            # git -C "$GIT_UBUNTU_TOOLS" stash
        # Update the branch to the latest code
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
            git -C "$GIT_UBUNTU_TOOLS" pull
        # Merge your local changes into the latest code:
            # git -C "$GIT_UBUNTU_TOOLS" stash apply
        # Add, commit and push your changes
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
            git -C "$GIT_UBUNTU_TOOLS" add "$GIT_UBUNTU_TOOLS"
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
            git -C "$GIT_UBUNTU_TOOLS" commit
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
            git -C "$GIT_UBUNTU_TOOLS" push
            if $DEBUG_MODE ; then echo "DEBUG MARKER $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi
	    
    # 2024-07-23 No. All this is managed in _apply-permissions
    # # Set permissions for git directory
    #     echo
    #     echo "Tightening permissions in $GIT_ROOT"
	# 	chmod -R 400 $GIT_ROOT

    # 2024-07-23 No. All this now accomplished by making $SBIN_DIR a symbolic link to $GIT_UBUNTU_TOOLS_SBIN.
    # # Copy scripts into $SBIN_DIR
    #     echo
    #     echo "Copying git SBIN_DIR contents to $SBIN_DIR and services to $SERVICES_DIR"# 
	# 	rm -rf $SBIN_DIR
	# 	cp -r $GIT_UBUNTU_TOOLS_SBIN $SBIN_PARENT
    #     cp -r $GIT_UBUNTU_TOOLS_SERVICES/*.service $SERVICES_DIR/
	# 	cd "$CURRENT_DIRECTORY"
	# 	f_log_and_echo "git branch $GIT_BRANCH pulled." false > $REDIRECT

# 2024-07-23 No. All this is managed in _apply-permissions
# # Set ownership and permissions in $SBIN_DIR (to be overwritten by _apply-configs)
#     echo
#     echo Setting ownership and permissions in $SBIN_DIR
# 	echo chown -R $ROOT_USER:$ROOT_USER $SBIN_DIR
# 	chown -R $ROOT_USER:$ROOT_USER $SBIN_DIR
# 	find $SBIN_DIR -type d -print -exec chmod $SBIN_PERMISSIONS {} \; >> /dev/null 2>&1
# 	find $SBIN_DIR -type f -print -exec chmod $SBIN_PERMISSIONS {} \; >> /dev/null 2>&1

# 2024-07-23 No. All this is managed in _apply-permissions
# Set ownership and permissions in $SERVICES_DIR (to be overwritten by _apply-configs)
#     echo
#     echo Setting ownership and permissions in $SERVICES_DIR
# 	echo chown -R $ROOT_USER:$ROOT_USER $SERVICES_DIR
# 	chown -R $ROOT_USER:$ROOT_USER $SERVICES_DIR
# 	find $SERVICES_DIR -type d -print -exec chmod $SERVICES_DIR_PERMISSIONS {} \; >> /dev/null 2>&1
# 	find $SERVICES_DIR -type f -print -exec chmod $SERVICES_FILE_PERMISSIONS {} \; >> /dev/null 2>&1

# Apply configs
    echo
    echo "Applying configurations"
	f_apply_configs $ARGS


###################################################
# Wrap up.

if $DEBUG_MODE ; then echo "DEBUG ENDING $0 line ${LINENO}" $(date +"%F %T.%3N %Z") ; fi

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"
