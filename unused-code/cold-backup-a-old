#!/bin/bash
# cold-backup

# Include script setup file
        source script-setup
        if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
        if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

# Require root
        f_require_root

# $COLD_BACKUP_FILE_SYSTEM can't be root
        if [ "$COLD_BACKUP_FILE_SYSTEM" == "/" ]; then
                f_die "Backup file system cannot be /." true
                fi

# Make the cold backup file system writable
if ! $(f_mount_ro_fs_as_rw "$COLD_BACKUP_FILE_SYSTEM") ; then
        f_die "$COLD_BACKUP_FILE_SYSTEM is not mounted." true
        fi

# Dropped several services covered here in Dec 2020 because all services were being killed and not returning.
# See COLD_PROTECTED_SERVICES in _vars
# Stop services as needed
#       systemctl stop $COLD_PROTECTED_SERVICES

# Store current directory and switch to root
CURRENT_DIRECTORY="$(pwd)"
cd /

# Make container directory
f_log_and_echo "Making container directory" false
mkdir -p -m 700 "$COLD_BACKUP_DIRECTORY"
chmod 700 "$COLD_BACKUP_DIRECTORY"
chown root:root "$COLD_BACKUP_DIRECTORY"

# Make temp cold backup directory
f_log_and_echo "Making temp cold backup directory" false
mkdir -p -m 700 "$TEMP_COLD_BACKUP_DIRECTORY"
chmod 700 "$TEMP_COLD_BACKUP_DIRECTORY"
chown root:root "$TEMP_COLD_BACKUP_DIRECTORY"

# Make temp archive directory
f_log_and_echo "Making temp archive directory" false
mkdir -p -m 700 "$TEMP_ARCHIVE_DIRECTORY"
chmod 700 "$TEMP_ARCHIVE_DIRECTORY"
chown root:root "$TEMP_ARCHIVE_DIRECTORY"

# Export cron jobs for $CRONTAB_BACKUP_USERS
f_log_and_echo "Exporting cron jobs for $CRONTAB_BACKUP_USERS" false
for SELECTED_USER in $CRONTAB_BACKUP_USERS; do 
        crontab -l -u $SELECTED_USER > $(eval echo "~$SELECTED_USER")/.crontab-archive 2>/dev/null
        chmod 600 $(eval echo "~$SELECTED_USER")/.crontab-archive
        chown $SELECTED_USER $(eval echo "~$SELECTED_USER")/.crontab-archive
        done

# Do backup with rsync to $TEMP_COLD_BACKUP_DIRECTORY
f_log_and_echo "Backing up to $TEMP_COLD_BACKUP_DIRECTORY" false
rsync -aloprtvER --delete $COLD_BACKUP_SOURCES "$TEMP_COLD_BACKUP_DIRECTORY"
# Back up MySQL
        f_log_and_echo "Backing up MySQL" false
        systemctl stop mysql
        mkdir -p -m 700 "$TEMP_COLD_BACKUP_DIRECTORY/var/lib/mysql"
        chmod 700 "$TEMP_COLD_BACKUP_DIRECTORY/var/lib/mysql"
        chown root:root "$TEMP_COLD_BACKUP_DIRECTORY/var/lib/mysql"
        rsync -aloprtvER --delete /var/lib/mysql/* "$TEMP_COLD_BACKUP_DIRECTORY"
        systemctl start mysql
# Back up Postfix
        f_log_and_echo "Backing up Postfix" false
        systemctl stop postfix
        mkdir -p -m 700 "$COLD_BACKUP_DIRECTORY/var/lib/postfix"
        chmod 700 "$TEMP_COLD_BACKUP_DIRECTORY/var/lib/postfix"
        chown root:root "$TEMP_COLD_BACKUP_DIRECTORY/var/lib/postfix"
        rsync -aloprtvER --delete /var/lib/postfix/* "$TEMP_COLD_BACKUP_DIRECTORY"  # --delete means from the target
        systemctl start postfix

# Remove crontab export file
        rm "$(eval echo "~$SELECTED_USER")/.crontab-archive"

# Start services as needed
#       systemctl start $COLD_PROTECTED_SERVICES

# Commented this out December 2020 because the drive itself was removed, causing data to be written into the mount point (need to fix)
# Archive the cold backup
        # Make the archive directory for this server and set its permissions
                mkdir -p -m 700 "$THIS_ARCHIVE_DIRECTORY"
                chmod 700 "$THIS_ARCHIVE_DIRECTORY"
                chown root:root "$THIS_ARCHIVE_DIRECTORY"
        # Create $ARCHIVE_TAR_WEEKDAY_FILE in $TEMP_ARCHIVE_DIRECTORY (usually /var/tmp/archive)
                f_log_and_echo "Creating $ARCHIVE_TAR_WEEKDAY_FILE in $TEMP_ARCHIVE_DIRECTORY" false
                nice tar $BACKUP_OPTIONS $TEMP_COLD_BACKUP_DIRECTORY
        # Copy the weekday archive (tar) file to a monthly version
                f_log_and_echo "Copying $TEMP_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_WEEKDAY_FILE to $ARCHIVE_TAR_FULL_MONTH" false
                nice cp "$TEMP_ARCHIVE_DIRECTORY/$ARCHIVE_TAR_WEEKDAY_FILE" "$ARCHIVE_TAR_FULL_MONTH"
        # Move the weekday and monthly version from the temporary directory to the permanent archive directory
                f_log_and_echo "Moving $TEMP_ARCHIVE_DIRECTORY/* to $THIS_ARCHIVE_DIRECTORY/" false
                mv "$TEMP_ARCHIVE_DIRECTORY/"* $THIS_ARCHIVE_DIRECTORY/
        # rsync the temp cold-backup directory to its permanent counterpart
                f_log_and_echo "Rsyncing $TEMP_COLD_BACKUP_DIRECTORY/* to $COLD_BACKUP_DIRECTORY" false
                rsync -aloprtvE --delete $TEMP_COLD_BACKUP_DIRECTORY/* "$COLD_BACKUP_DIRECTORY"  # --delete means from the target

# Re-mount read-only target devices as read-write; DISABLED
# if [ $COLD_BACKUP_FS_READ_ONLY ]; then
#       cd /
#       umount -q "$COLD_BACKUP_FILE_SYSTEM"
#       # f_mount_ro_fs_as_ro "$COLD_BACKUP_FILE_SYSTEM" $COLD_BACKUP_FS_READ_ONLY > /dev/null
#       fi

# Restore working directory
cd "$CURRENT_DIRECTORY"
 
# Update log
        echo
        echo Backup completed $(/bin/date '+%Y-%m-%d-%H-%M-%S-%Z')
        echo Backup completed $(/bin/date '+%Y-%m-%d-%H-%M-%S-%Z') >> $COLD_BACKUP_LOG
        chown $ADMIN_USER $COLD_BACKUP_LOG

# Include script footer file
        f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
        source "${PATHNAME[script_footer]}"

exit 0
