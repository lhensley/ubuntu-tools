#!/bin/bash
# process-ts
# Usage: process-ts <input_file> <work_root_path> <store_root_path>
# No final / on either path. For system root, use ""

# Include script setup file
	source script-setup
	if [ ! $FUNCTIONS_ARE_DEFINED ]; then echo $0: Functions not defined. Aborting; logger $0: Functions not defined. Aborting; exit 1; fi
	if [ ! $VARIABLES_ARE_DEFINED ]; then echo $0: Variables not defined. Aborting; logger $0: Variables not defined. Aborting; exit 1; fi

IN_FILE="$1"
WORK_ROOT_PATH="$2"
STORE_ROOT_PATH="$3"
OUT_EXT="m4v"

f_require_file "$IN_FILE"
f_require_directory "$WORK_ROOT_PATH"
f_require_directory "$STORE_ROOT_PATH"
f_require_value "IGNORE_TV_SHOWS" "$IGNORE_TV_SHOWS"
f_require_file "${PATHNAME[move_one_file]}"

WORK_ROOT_PATH_LENGTH=${#WORK_ROOT_PATH}

IN_FILE_LENGTH=${#IN_FILE}
IN_FILE_EXT="${IN_FILE##*.}"
IN_FILE_EXT_LENGTH="${#IN_FILE_EXT}"

RELATIVE_FILE_LENGTH=$[IN_FILE_LENGTH-WORK_ROOT_PATH_LENGTH-1]
RELATIVE_FILE=${IN_FILE: -$RELATIVE_FILE_LENGTH} # First remove WORK_ROOT_PATH
RELATIVE_FILE_NO_EXT_LENGTH=$[RELATIVE_FILE_LENGTH-IN_FILE_EXT_LENGTH-1] # Recalculate relative path length by removing extension length
RELATIVE_FILE_NO_EXT=${RELATIVE_FILE:0:RELATIVE_FILE_NO_EXT_LENGTH} # Then remove IN_FILE_EXT
OUT_FILE="$WORK_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"
STORE_FILE="$STORE_ROOT_PATH/$RELATIVE_FILE_NO_EXT.$OUT_EXT"

# So here are useful variables defined ...
# $IN_FILE
# $OUT_FILE
# $STORE_FILE
# $WORK_ROOT_PATH
# $STORE_ROOT_PATH
# $RELATIVE_FILE

f_require_value "OUT_FILE" "$OUT_FILE"
f_require_value "RELATIVE_FILE" "$RELATIVE_FILE"
f_require_value "STORE_FILE" "$STORE_FILE"
f_require_value "plex_main_library_directory" "$PLEX_LIVE_APPLICATION_SUPPORT"

if $(f_filter "$IN_FILE" "$IGNORE_TV_SHOWS"); then
    logger $0: Skipped $IN_FILE
else
    f_file_not_in_use "$IN_FILE"

    # Hold this part out for now. Not sure this is the place for it.
    # "${PATHNAME[transcode_ripped_dvds]}" # Pick up ripped DVDs first, if any

    # Do the transcoding
    TIMESTART=$(date +%s)
    IN_FILE_BASE=$(basename "$IN_FILE")
    logger $0: Transcoding $IN_FILE_BASE
    nice "$HANDBRAKE_CLI" --preset-import-file "$HANDBRAKE_PRESETS" -i "$IN_FILE" -o "$OUT_FILE"
    exit_status=$?
    chown plex:plex "$OUT_FILE"
    chmod 664 "$OUT_FILE"
    if [ $exit_status -ne 0 ]; then # If the transcoding failed ...
            logger $HANDBRAKE_CLI: FAILED with $exit_status for $IN_FILE
            echo $HANDBRAKE_CLI: FAILED with $exit_status for $IN_FILE | mail $TEXT_ALERTS
            exit $exit_status
        else
            rm "$IN_FILE" # Delete input file
            logger $0: Transcoding complete in $(timeformat $(( $(date +%s) - TIMESTART )))
        fi # End of check for transcoding failure

    # Move all .m4v files from $VIDEO_WORK_DIRECTORY to $VIDEO_STORE_DIRECTORY.
        find "$VIDEO_WORK_DIRECTORY" -type f -name "*.m4v" | while read FILE; 
            do f_move_one_file "$FILE" "$VIDEO_WORK_DIRECTORY" "$VIDEO_STORE_DIRECTORY"; done
    fi

# Include script footer file
	f_debug_variable "script_footer" "${PATHNAME[script_footer]}"
	source "${PATHNAME[script_footer]}"

exit 0

